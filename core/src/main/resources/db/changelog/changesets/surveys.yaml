databaseChangeLog:
  - changeSet:
      id: "surveys"
      author: dbush
      changes:
        - createTable:
            tableName: survey
            columns:
              - column: &idColumn
                  { name: id, type: uuid, defaultValueComputed: gen_random_uuid(), constraints: { nullable: false, primaryKey: true } }
              - column: &createdAt
                  { name: created_at, type: datetime, constraints: { nullable: false } }
              - column: &lastUpdatedAt
                  { name: last_updated_at, type: datetime, constraints: { nullable: false } }
              - column: { name: name, type: text }
              - column: { name: stable_id, type: text, constraints: { nullable: false } }
              - column: { name: version, type: integer, constraints: { nullable: false } }
              - column: { name: content, type: text }
        - addUniqueConstraint:
            tableName: survey
            constraintName: uc_survey_stable_id_version
            columnNames: stable_id, version
        - createTable:
            tableName: study_environment_survey
            columns:
              - column: *idColumn
              - column: *createdAt
              - column: *lastUpdatedAt
              - column: { name: study_environment_id, type: uuid, constraints:
                { nullable: false, foreignKeyName: fk_study_environment_survey_env, references: study_environment(id) }
              }
              - column: { name: survey_id, type: uuid, constraints:
                { nullable: false, foreignKeyName: fk_study_environment_survey_survey, references: survey(id) }
              }
        - createTable:
            tableName: schedule
            columns:
              - column: *idColumn
              - column: *createdAt
              - column: *lastUpdatedAt
              - column: { name: recur, type: boolean, defaultValueBoolean: false, constraints: { nullable: false } }
              - column: { name: recurrence_interval_days, type: integer }
        - createTable:
            tableName: survey_batch
            columns:
              - column: *idColumn
              - column: *createdAt
              - column: *lastUpdatedAt
              - column: { name: study_environment_id, type: uuid, constraints:
                { nullable: false, foreignKeyName: fk_survey_batch_study_environment, references: study_environment(id) }
              }
              - column: { name: schedule_id, type: uuid, constraints:
                { unique: true, foreignKeyName: fk_survey_batch_schedule, references: schedule(id) }
              }
              - column: { name: rule, type: text }
              - column: { name: strict_order, type: boolean, defaultValueBoolean: false, constraints: { nullable: false }  }
        - createTable:
            tableName: survey_batch_survey
            columns:
              - column: *idColumn
              - column: *createdAt
              - column: *lastUpdatedAt
              - column: { name: survey_order, type: integer }
              - column: { name: survey_id, type: uuid, constraints:
                { nullable: false, foreignKeyName: fk_survey_batch_survey_survey, references: survey(id) }
              }
              - column: { name: survey_batch_id, type: uuid, constraints:
                { nullable: false, foreignKeyName: fk_survey_batch_survey_batch, references: survey_batch(id) }
              }
              - column: { name: rule, type: text }
              - column: { name: allow_admin_edit, type: boolean, defaultValueBoolean: true, constraints: { nullable: false } }
              - column: { name: allow_participant_start, type: boolean, defaultValueBoolean: true, constraints: { nullable: false } }
              - column: { name: allow_participant_reedit, type: boolean, defaultValueBoolean: true, constraints: { nullable: false } }
              - column: { name: prepopulate, type: boolean, defaultValueBoolean: false, constraints: { nullable: false } }
        - createTable:
            tableName: survey_response
            columns:
              - column: *idColumn
              - column: *createdAt
              - column: *lastUpdatedAt
              - column: { name: complete, type: boolean, defaultValueBoolean: false, constraints: { nullable: false } }
              - column: { name: survey_id, type: uuid, constraints:
                { nullable: false, foreignKeyName: fk_survey_response_survey, references: survey(id) }
              }
              - column: { name: enrollee_id, type: uuid, constraints:
                { nullable: false, foreignKeyName: fk_survey_response_enrollee, references: enrollee(id) }
              }
              - column: { name: participant_user_id, type: uuid, constraints:
                { foreignKeyName: fk_survey_response_participant_user, references: participant_user(id) }
              }
              - column: { name: admin_user_id, type: uuid, constraints:
                { foreignKeyName: fk_survey_response_admin_user, references: admin_user(id) }
              }
        - sql:  # addCheckConstraint is only available for LiquibasePro, so add this check via raw sql
            sql: alter table survey_response add constraint chk_survey_response_has_user check (participant_user_id != null or admin_user_id != null);

        - createTable:
            tableName: response_snapshot
            columns:
              - column: *idColumn
              - column: *createdAt
              - column: *lastUpdatedAt
              - column: { name: participant_user_id, type: uuid, constraints:
                { foreignKeyName: fk_survey_response_participant_user, references: participant_user(id) }
              }
              - column: { name: admin_user_id, type: uuid, constraints:
                { foreignKeyName: fk_survey_response_admin_user, references: admin_user(id) }
              }
              - column: { name: survey_response_id, type: uuid, constraints:
                { nullable: false, foreignKeyName: fk_response_snapshot_survey_response, references: survey_response(id) }
              }
              - column: { name: resume_data, type: text }
              - column: { name: full_data, type: text }
        - sql: # addCheckConstraint is only available for LiquibasePro, so add this check via raw sql
            sql: alter table response_snapshot add constraint chk_response_snapshot_has_user check (participant_user_id != null or admin_user_id != null);

        - addColumn:
            tableName: survey_response
            columns:
              - column: { name: last_snapshot_id, type: uuid, constraints:
                { foreignKeyName: fk_survey_response_last_snapshot, references: response_snapshot(id) }
              }



