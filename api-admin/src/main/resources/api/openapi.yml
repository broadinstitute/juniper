openapi: 3.0.3
info:
  title: Juniper Admin API
  description: API for portal and study management
  version: 0.0.1
paths:
  /status:
    get:
      summary: Check status of the service
      tags: [ public ]
      operationId: getStatus
      security: [ ]
      responses:
        '200':
          $ref: '#/components/responses/SystemStatusResponse'
        '500':
          $ref: '#/components/responses/ServerError'
        '503':
          $ref: '#/components/responses/SystemStatusResponse'

  /version:
    get:
      summary: Get version info of the deployed service
      tags: [ public ]
      operationId: getVersion
      security: [ ]
      responses:
        '200':
          description: Version information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VersionProperties'
        '404':
          description: "Version not configured"
        '500':
          $ref: '#/components/responses/ServerError'

  /config:
    get:
      summary: Get configuration info for authenticating with and using the API
      tags: [ public ]
      operationId: getConfig
      security: [ ]
      responses:
        '200':
          description: Configuration information
          content: { application/json: { schema: { type: object } } }

  /api/example/v1/{resourceType}/{resourceId}/{action}:
    get:
      summary: Checks sam access
      tags: [ example ]
      operationId: getAction
      parameters:
        - name: resourceType
          in: path
          required: true
          schema:
            type: string
        - name: resourceId
          in: path
          required: true
          schema:
            type: string
        - name: action
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: action access
          content:
            application/json:
              schema:
                type: boolean
        '500':
          $ref: '#/components/responses/ServerError'
  /api/portals/v1:
    get:
      summary: Gets a list of portals for the user
      tags: [ portal ]
      operationId: getAll
      responses:
        '200':
          description: list of portal objects
          content: { application/json: { schema: {type: array, items: { $ref: '#/components/schemas/PortalShallowDto' } } } }
        '500':
          $ref: '#/components/responses/ServerError'
  /api/portals/v1/{portalShortcode}:
    get:
      summary: Gets the portal object
      tags: [ portal ]
      operationId: get
      parameters:
        - { name: portalShortcode, in: path, required: true, schema: {type: string} }
      responses:
        '200':
          description: portal object
          content: { application/json: { schema: { type: object }}}
        '500':
          $ref: '#/components/responses/ServerError'
  /api/portals/v1/{portalShortcode}/adminUsers:
    get:
      summary: Gets the admin users specific to this portal
      tags: [ adminUser ]
      operationId: getByPortal
      parameters:
        - { name: portalShortcode, in: path, required: true, schema: { type: string } }
      responses:
        '200':
          description: List of admin users
          content: { application/json: { schema: {type: object} } }
        '500':
          $ref: '#/components/responses/ServerError'

  /api/portals/v1/{portalShortcode}/adminUser/{adminUserId}:
    delete:
      summary: Remove an admin user for portal
      tags: [ portal ]
      operationId: removePortalUser
      parameters:
        - { name: portalShortcode, in: path, required: true, schema: { type: string } }
        - { name: adminUserId, in: path, required: true, schema: { type: string, format: uuid } }
      responses:
        '204':
          description: admin user removed
        '404':
          description: admin user not found
        '500':
          $ref: '#/components/responses/ServerError'

  /api/portals/v1/{portalShortcode}/studies/{studyShortcode}/env/{envName}/adminTasks:
    get:
      summary: Gets all the admin tasks for this study environment
      tags: [ adminTask ]
      operationId: getByStudyEnvironment
      parameters:
        - { name: portalShortcode, in: path, required: true, schema: { type: string } }
        - { name: studyShortcode, in: path, required: true, schema: { type: string } }
        - { name: envName, in: path, required: true, schema: { type: string } }
        - { name: include, in: query, required: false, schema: { type: string } }
      responses:
        '200':
          description: List of admin tasks
          content: { application/json: { schema: { type: object } } }
        '500':
          $ref: '#/components/responses/ServerError'
  /api/portals/v1/{portalShortcode}/studies/{studyShortcode}/env/{envName}/adminTasks/{id}:
    patch:
      summary: Updates the specified task
      tags: [ adminTask ]
      operationId: update
      parameters:
        - { name: portalShortcode, in: path, required: true, schema: { type: string } }
        - { name: studyShortcode, in: path, required: true, schema: { type: string } }
        - { name: envName, in: path, required: true, schema: { type: string } }
        - { name: id, in: path, required: true, schema: { type: string, format: uuid} }
      requestBody:
        required: true
        content: { application/json: { schema: { type: object } } }
      responses:
        '200':
          description: The updated task
          content: { application/json: { schema: { type: object } } }
        '500':
          $ref: '#/components/responses/ServerError'
  /api/portals/v1/{portalShortcode}/surveys/{stableId}/{version}:
    get:
      summary: gets the requested survey
      tags: [ survey ]
      operationId: get
      parameters:
        - { name: portalShortcode, in: path, required: true, schema: { type: string } }
        - { name: stableId, in: path, required: true, schema: { type: string } }
        - { name: version, in: path, required: true, schema: { type: integer } }
      responses:
        '200':
          description: survey object
          content: { application/json: { schema: {type: object} } }
        '500':
          $ref: '#/components/responses/ServerError'
  /api/portals/v1/{portalShortcode}/surveys/{stableId}:
    get:
      summary: gets all versions of the requested survey
      tags: [ survey ]
      operationId: getAllVersions
      parameters:
        - { name: portalShortcode, in: path, required: true, schema: { type: string } }
        - { name: stableId, in: path, required: true, schema: { type: string } }
      responses:
        '200':
          description: list of survey version metadata
          content: { application/json: { schema: { type: object } } }
        '500':
          $ref: '#/components/responses/ServerError'
    delete:
      summary: deletes the specified survey, will fail if the survey has any responses or is in use by a non-sandbox environment
      tags: [ survey ]
      operationId: delete
      parameters:
        - { name: portalShortcode, in: path, required: true, schema: { type: string } }
        - { name: stableId, in: path, required: true, schema: { type: string } }
      responses:
        '204':
          description: No Content
        '500':
          $ref: '#/components/responses/ServerError'
  /api/portals/v1/{portalShortcode}/surveys:
    post:
      summary: creates the requested survey, will fail if the given stableId already exists
      tags: [ survey ]
      operationId: create
      parameters:
        - { name: portalShortcode, in: path, required: true, schema: { type: string } }
      requestBody:
        required: true
        content: { application/json: { schema: {type: object} } }
      responses:
        '200':
          description: saved survey object
          content: { application/json: { schema: { type: object } } }
        '500':
          $ref: '#/components/responses/ServerError'
  /api/portals/v1/{portalShortcode}/surveys/{stableId}/newVersion:
    post:
      summary: Saves the survey as a new version
      tags: [ survey ]
      operationId: newVersion
      parameters:
        - { name: portalShortcode, in: path, required: true, schema: { type: string } }
        - { name: stableId, in: path, required: true, schema: { type: string } }
      requestBody:
        required: true
        content: { application/json: { schema: {type: object} } }
      responses:
        '200':
          description: saved survey object
          content: { application/json: { schema: {type: object} } }
        '500':
          $ref: '#/components/responses/ServerError'
  /api/portals/v1/{portalShortcode}/studies/{studyShortcode}/env/{envName}/configuredSurveys:
    post:
      summary: Creates a configured survey in a study environment
      tags: [ configuredSurvey ]
      operationId: create
      parameters:
        - { name: portalShortcode, in: path, required: true, schema: { type: string } }
        - { name: studyShortcode, in: path, required: true, schema: { type: string } }
        - { name: envName, in: path, required: true, schema: { type: string } }
      requestBody:
        required: true
        content: { application/json: { schema: { type: object } } }
      responses:
        '200':
          description: saved configuredSurvey object
          content: { application/json: { schema: { type: object } } }
        '500':
          $ref: '#/components/responses/ServerError'
  /api/portals/v1/{portalShortcode}/studies/{studyShortcode}/env/{envName}/configuredSurveys/{configSurveyId}:
    delete:
      summary: Removes a configured survey from a study environment
      tags: [ configuredSurvey ]
      operationId: remove
      parameters:
        - { name: portalShortcode, in: path, required: true, schema: { type: string } }
        - { name: studyShortcode, in: path, required: true, schema: { type: string } }
        - { name: envName, in: path, required: true, schema: { type: string } }
        - { name: configSurveyId, in: path, required: true, schema: { type: string, format: uuid } }
      responses:
        '204':
          description: No Content
        '500':
          $ref: '#/components/responses/ServerError'
    patch:
      summary: Updates a configured survey, such as by updating to a new version of the survey
      tags: [ configuredSurvey ]
      operationId: patch
      parameters:
        - { name: portalShortcode, in: path, required: true, schema: { type: string } }
        - { name: studyShortcode, in: path, required: true, schema: { type: string } }
        - { name: envName, in: path, required: true, schema: { type: string } }
        - { name: configSurveyId, in: path, required: true, schema: { type: string, format: uuid } }
      requestBody:
        required: true
        content: { application/json: { schema: { type: object } } }
      responses:
        '200':
          description: saved configuredSurvey object
          content: { application/json: { schema: { type: object } } }
        '500':
          $ref: '#/components/responses/ServerError'
  /api/portals/v1/{portalShortcode}/consentForms/{stableId}/{version}/newVersion:
    post:
      summary: Saves the consentForm as a new version
      tags: [ consentForm ]
      operationId: newVersion
      parameters:
        - { name: portalShortcode, in: path, required: true, schema: { type: string } }
        - { name: stableId, in: path, required: true, schema: { type: string } }
      requestBody:
        required: true
        content: { application/json: { schema: { type: object } } }
      responses:
        '200':
          description: saved survey object
          content: { application/json: { schema: { type: object } } }
        '500':
          $ref: '#/components/responses/ServerError'
  /api/portals/v1/{portalShortcode}/consentForms/{stableId}:
    post:
      summary: Saves a new consentForm with anew stableId as a new form -- will be assigned version 1
      tags: [ consentForm ]
      operationId: create
      parameters:
        - { name: portalShortcode, in: path, required: true, schema: { type: string } }
        - { name: stableId, in: path, required: true, schema: { type: string } }
      requestBody:
        required: true
        content: { application/json: { schema: { type: object } } }
      responses:
        '200':
          description: saved survey object
          content: { application/json: { schema: { type: object } } }
        '500':
          $ref: '#/components/responses/ServerError'
  /api/portals/v1/{portalShortcode}/studies/{studyShortcode}/env/{envName}/configuredConsents:
    post:
      summary: creates a configured consent for a study environment
      tags: [ configuredConsent ]
      operationId: create
      parameters:
        - { name: portalShortcode, in: path, required: true, schema: { type: string } }
        - { name: studyShortcode, in: path, required: true, schema: { type: string } }
        - { name: envName, in: path, required: true, schema: { type: string } }
      requestBody:
        required: true
        content: { application/json: { schema: { schema: { type: object } } } }
      responses:
        '200':
          description: saved configuredConsent object
          content: { application/json: { schema: { schema: { type: object } } } }
        '500':
          $ref: '#/components/responses/ServerError'
  /api/portals/v1/{portalShortcode}/studies/{studyShortcode}/env/{envName}/configuredConsents/{configConsentId}:
    patch:
      summary: Updates a configured consent, such as by updating to a new version of the consent
      tags: [ configuredConsent ]
      operationId: patch
      parameters:
        - { name: portalShortcode, in: path, required: true, schema: { type: string } }
        - { name: studyShortcode, in: path, required: true, schema: { type: string } }
        - { name: envName, in: path, required: true, schema: { type: string } }
        - { name: configConsentId, in: path, required: true, schema: { type: string, format: uuid } }
      requestBody:
        required: true
        content: { application/json: { schema: { schema: { type: object } } } }
      responses:
        '200':
          description: saved configuredConsent object
          content: { application/json: { schema: { schema: { type: object } } } }
        '500':
          $ref: '#/components/responses/ServerError'
  /api/portals/v1/{portalShortcode}/siteContents/{stableId}:
    get:
      summary: Returns available versions of the given site content with the stableID
      tags: [ siteContent ]
      operationId: versionList
      parameters:
        - { name: portalShortcode, in: path, required: true, schema: { type: string } }
        - { name: stableId, in: path, required: true, schema: { type: string } }
      responses:
        '200':
          description: list of (shallow) SiteContent objects
          content: { application/json: { schema: { schema: { type: object } } } }
        '500':
          $ref: '#/components/responses/ServerError'
    post:
      summary: Saves a new version of the given sitecontent.  Returns the saved content
      tags: [ siteContent ]
      operationId: create
      parameters:
        - { name: portalShortcode, in: path, required: true, schema: { type: string } }
        - { name: stableId, in: path, required: true, schema: { type: string } }
      requestBody:
        required: true
        content: { application/json: { schema: { schema: { type: object } } } }
      responses:
        '200':
          description: list of (shallow) SiteContent objects
          content: { application/json: { schema: { schema: { type: object } } } }
        '500':
          $ref: '#/components/responses/ServerError'
  /api/portals/v1/{portalShortcode}/siteContents/{stableId}/{version}:
    get:
      summary: Returns the site content with the given stableId/version, along with all child content in the specified language (english is default)
      tags: [ siteContent ]
      operationId: get
      parameters:
        - { name: portalShortcode, in: path, required: true, schema: { type: string } }
        - { name: stableId, in: path, required: true, schema: { type: string } }
        - { name: version, in: path, required: true, schema: { type: integer } }
        - { name: language, in: query, required: false, schema: { type: string } }
      responses:
        '200':
          description: SiteContent object with all dependent relations attached
          content: { application/json: { schema: { schema: { type: object } } } }
        '500':
          $ref: '#/components/responses/ServerError'
  /api/portals/v1/{portalShortcode}/studies:
    post:
      summary: creates a new study for the given portal
      tags: [ study ]
      operationId: create
      parameters:
        - { name: portalShortcode, in: path, required: true, schema: { type: string } }
      requestBody:
        required: true
        content: { application/json: { schema: { schema: { type: object } } } }
      responses:
        '200':
          description: new study object
          content: { application/json: { schema: { type: object } } }
        '500':
          $ref: '#/components/responses/ServerError'
  /api/portals/v1/{portalShortcode}/studies/{studyShortcode}/kitTypes:
    get:
      summary: Gets the kit types for a study
      tags: [ study ]
      operationId: getKitTypes
      parameters:
        - { name: portalShortcode, in: path, required: true, schema: { type: string } }
        - { name: studyShortcode, in: path, required: true, schema: { type: string } }
      responses:
        '200':
          description: List of kit types
          content: { application/json: { schema: { type: object } } }
        '500':
          $ref: '#/components/responses/ServerError'
  /api/portals/v1/{portalShortcode}/studies/{studyShortcode}/env/{envName}/requestKits:
    post:
      summary: Request sample kits for a batch of enrollees
      tags: [ kit ]
      operationId: requestKits
      parameters:
        - { name: portalShortcode, in: path, required: true, schema: { type: string } }
        - { name: studyShortcode, in: path, required: true, schema: { type: string } }
        - { name: envName, in: path, required: true, schema: { type: string } }
        - { name: kitType, in: query, required: true, schema: { type: string } }
      requestBody:
        required: true
        description: JSON array of enrollee shortcodes
        content: { application/json: { schema: { type: object } } }
      responses:
        '200':
          description: Kit requests
          content: { application/json: { schema: { type: object } } }
        '500':
          $ref: '#/components/responses/ServerError'
  /api/portals/v1/{portalShortcode}/studies/{studyShortcode}/env/{envName}:
    patch:
      summary: Updates a study environment object, such as by setting the pre-enroll survey
      tags: [ studyEnvironment ]
      operationId: patch
      parameters:
        - { name: portalShortcode, in: path, required: true, schema: { type: string } }
        - { name: studyShortcode, in: path, required: true, schema: { type: string } }
        - { name: envName, in: path, required: true, schema: { type: string } }
      requestBody:
        required: true
        content: { application/json: { schema: { $ref: '#/components/schemas/StudyEnvironmentDto' } } }
      responses:
        '200':
          description: saved studyEnvironment object
          content: { application/json: { schema: { $ref: '#/components/schemas/StudyEnvironmentDto' } } }
        '500':
          $ref: '#/components/responses/ServerError'
  /api/portals/v1/{portalShortcode}/studies/{studyShortcode}/env/{envName}/config:
    patch:
      summary: Updates a study environment config object, such as setting password
      tags: [ studyEnvironment ]
      operationId: patchConfig
      parameters:
        - { name: portalShortcode, in: path, required: true, schema: { type: string } }
        - { name: studyShortcode, in: path, required: true, schema: { type: string } }
        - { name: envName, in: path, required: true, schema: { type: string } }
      requestBody:
        required: true
        content: { application/json: { schema: {type: object} } }
      responses:
        '200':
          description: saved studyEnvironment object
          content: { application/json: { schema:  {type: object} } }
        '500':
          $ref: '#/components/responses/ServerError'
  /api/portals/v1/{portalShortcode}/studies/{studyShortcode}/env/{envName}/stats:
    get:
      summary: Returns stats about the study environment
      tags: [ studyEnvironment ]
      operationId: stats
      parameters:
        - { name: portalShortcode, in: path, required: true, schema: { type: string } }
        - { name: studyShortcode, in: path, required: true, schema: { type: string } }
        - { name: envName, in: path, required: true, schema: { type: string } }
      responses:
        '200':
          description: saved studyEnvironment object
          content: { application/json: { schema: {type: object} } }
        '500':
          $ref: '#/components/responses/ServerError'
  /api/portals/v1/{portalShortcode}/studies/{studyShortcode}/env/{envName}/enrollees:
    get:
      summary: Searches for enrollees in an environment
      tags: [ enrolleeSearch ]
      operationId: search
      parameters:
        - { name: portalShortcode, in: path, required: true, schema: { type: string } }
        - { name: studyShortcode, in: path, required: true, schema: { type: string } }
        - { name: envName, in: path, required: true, schema: { type: string } }
        - { name: facets, in: query, required: false, schema: { type: string } }
      responses:
        '200':
          description: EnrolleeSearchResult objects
          content: { application/json: { schema: {type: object} } }
        '500':
          $ref: '#/components/responses/ServerError'
  /api/portals/v1/{portalShortcode}/studies/{studyShortcode}/env/{envName}/metrics/{metricName}:
    get:
      summary: Loads the specified metric for the given study env
      tags: [ metrics ]
      operationId: metricByName
      parameters:
        - { name: portalShortcode, in: path, required: true, schema: { type: string } }
        - { name: studyShortcode, in: path, required: true, schema: { type: string } }
        - { name: envName, in: path, required: true, schema: { type: string } }
        - { name: metricName, in: path, required: true, schema: { type: string } }
      responses:
        '200':
          description: BasicMetricDatum objects
          content: { application/json: { schema: { type: object } } }
        '500':
          $ref: '#/components/responses/ServerError'
  /api/portals/v1/{portalShortcode}/studies/{studyShortcode}/env/{envName}/enrollees/{enrolleeShortcode}:
    get:
      summary: Finds an enrollee by shortcode
      tags: [ enrollee ]
      operationId: find
      parameters:
        - { name: portalShortcode, in: path, required: true, schema: { type: string } }
        - { name: studyShortcode, in: path, required: true, schema: { type: string } }
        - { name: envName, in: path, required: true, schema: { type: string } }
        - { name: enrolleeShortcode, in: path, required: true, schema: { type: string } }
      responses:
        '200':
          description: Enrollee object
          content: { application/json: { schema: { type: object } } }
        '500':
          $ref: '#/components/responses/ServerError'
  /api/portals/v1/{portalShortcode}/studies/{studyShortcode}/env/{envName}/enrollees/{enrolleeShortcode}/withdraw:
    post:
      summary: withdraws the given enrollee from the study
      tags: [ enrollee ]
      operationId: withdraw
      parameters:
        - { name: portalShortcode, in: path, required: true, schema: { type: string } }
        - { name: studyShortcode, in: path, required: true, schema: { type: string } }
        - { name: envName, in: path, required: true, schema: { type: string } }
        - { name: enrolleeShortcode, in: path, required: true, schema: { type: string } }
      responses:
        '200':
          description: withdrawnEnrollee id
          content: { application/json: { schema: { type: object } } }
        '500':
          $ref: '#/components/responses/ServerError'
  /api/portals/v1/{portalShortcode}/studies/{studyShortcode}/env/{envName}/enrollees/{enrolleeShortcode}/notifications:
    get:
      summary: List the notifications sent/pending for an enrollee
      tags: [ notifications ]
      operationId: find
      parameters:
        - { name: portalShortcode, in: path, required: true, schema: { type: string } }
        - { name: studyShortcode, in: path, required: true, schema: { type: string } }
        - { name: envName, in: path, required: true, schema: { type: string } }
        - { name: enrolleeShortcode, in: path, required: true, schema: { type: string } }
      responses:
        '200':
          description: List of notifications
          content: { application/json: { schema: { type: object } } }
        '500':
          $ref: '#/components/responses/ServerError'
  /api/portals/v1/{portalShortcode}/studies/{studyShortcode}/env/{envName}/enrollees/{enrolleeShortcode}/changeRecords:
    get:
      summary: List the notifications sent/pending for an enrollee
      tags: [ enrollee ]
      operationId: listChangeRecords
      parameters:
        - { name: portalShortcode, in: path, required: true, schema: { type: string } }
        - { name: studyShortcode, in: path, required: true, schema: { type: string } }
        - { name: envName, in: path, required: true, schema: { type: string } }
        - { name: enrolleeShortcode, in: path, required: true, schema: { type: string } }
      responses:
        '200':
          description: List of DataChangeRecords
          content: { application/json: { schema: { type: object } } }
        '500':
          $ref: '#/components/responses/ServerError'
  /api/portals/v1/{portalShortcode}/studies/{studyShortcode}/env/{envName}/enrollees/{enrolleeShortcode}/adminTasks:
    get:
      summary: List adminTasks related to an enrollee
      tags: [ adminTask ]
      operationId: getByEnrollee
      parameters:
        - { name: portalShortcode, in: path, required: true, schema: { type: string } }
        - { name: studyShortcode, in: path, required: true, schema: { type: string } }
        - { name: envName, in: path, required: true, schema: { type: string } }
        - { name: enrolleeShortcode, in: path, required: true, schema: { type: string } }
      responses:
        '200':
          description: Admin tasks
          content: { application/json: { schema: { type: object } } }
        '500':
          $ref: '#/components/responses/ServerError'
  /api/portals/v1/{portalShortcode}/studies/{studyShortcode}/env/{envName}/enrollees/{enrolleeShortcode}/kitRequests:
    get:
      summary: List kit requests for an enrollee
      tags: [ kit ]
      operationId: getKitRequests
      parameters:
        - { name: portalShortcode, in: path, required: true, schema: { type: string } }
        - { name: studyShortcode, in: path, required: true, schema: { type: string } }
        - { name: envName, in: path, required: true, schema: { type: string } }
        - { name: enrolleeShortcode, in: path, required: true, schema: { type: string } }
      responses:
        '200':
          description: Kit requests
          content: { application/json: { schema: { type: object } } }
        '500':
          $ref: '#/components/responses/ServerError'
  /api/portals/v1/{portalShortcode}/studies/{studyShortcode}/env/{envName}/enrollees/{enrolleeShortcode}/requestKit:
    post:
      summary: Request a sample kit for an enrollee
      tags: [ kit ]
      operationId: requestKit
      parameters:
        - { name: portalShortcode, in: path, required: true, schema: { type: string } }
        - { name: studyShortcode, in: path, required: true, schema: { type: string } }
        - { name: envName, in: path, required: true, schema: { type: string } }
        - { name: enrolleeShortcode, in: path, required: true, schema: { type: string } }
        - { name: kitType, in: query, required: true, schema: { type: string } }
      responses:
        '200':
          description: Kit request
          content: { application/json: { schema: { type: object } } }
        '500':
          $ref: '#/components/responses/ServerError'
  /api/portals/v1/{portalShortcode}/studies/{studyShortcode}/env/{envName}/enrollees/{enrolleeShortcode}/participantNote:
    post:
      summary: Create a participant note
      tags: [ participantNote ]
      operationId: create
      parameters:
        - { name: portalShortcode, in: path, required: true, schema: { type: string } }
        - { name: studyShortcode, in: path, required: true, schema: { type: string } }
        - { name: envName, in: path, required: true, schema: { type: string } }
        - { name: enrolleeShortcode, in: path, required: true, schema: { type: string } }
      requestBody:
        required: true
        content: { application/json: { schema: { type: object } } }
      responses:
        '200':
          description: Participant note
          content: { application/json: { schema: { type: object } } }
        '500':
          $ref: '#/components/responses/ServerError'
  /api/portals/v1/{portalShortcode}/studies/{studyShortcode}/env/{envName}/notificationConfigs:
    get:
      summary: gets all the active notification configs for the environment
      tags: [ notificationConfig ]
      operationId: findByStudy
      parameters:
        - { name: portalShortcode, in: path, required: true, schema: { type: string } }
        - { name: studyShortcode, in: path, required: true, schema: { type: string } }
        - { name: envName, in: path, required: true, schema: { type: string } }
      responses:
        '200':
          description: The notification configs
          content: { application/json: { schema: { type: object } } }
        '500':
          $ref: '#/components/responses/ServerError'
  /api/portals/v1/{portalShortcode}/studies/{studyShortcode}/env/{envName}/notificationConfigs/{configId}:
    patch:
      summary: Since configs are immutable, a new config is made and the current one is deactivated.  The new config is attached to the study and is returned
      tags: [ notificationConfig ]
      operationId: replace
      parameters:
        - { name: portalShortcode, in: path, required: true, schema: { type: string } }
        - { name: studyShortcode, in: path, required: true, schema: { type: string } }
        - { name: envName, in: path, required: true, schema: { type: string } }
        - { name: configId, in: path, required: true, schema: { type: string, format: uuid} }
      requestBody:
        required: true
        content: { application/json: { schema: { type: object } } }
      responses:
        '200':
          description: The new notification config
          content: { application/json: { schema: { type: object } } }
        '500':
          $ref: '#/components/responses/ServerError'

  /api/portals/v1/{portalShortcode}/studies/{studyShortcode}/env/{envName}/notifications/adhoc:
    post:
      summary: Send a one-off notification/message to one or more enrollees with a specified notification config
      tags: [ notifications ]
      operationId: adHoc
      parameters:
        - { name: portalShortcode, in: path, required: true, schema: { type: string } }
        - { name: studyShortcode, in: path, required: true, schema: { type: string } }
        - { name: envName, in: path, required: true, schema: { type: string } }
      requestBody:
        required: true
        content: { application/json: { schema: { type: object } } }
      responses:
        '200':
          description: The notification config created/used for the notification
          content: { application/json: { schema: { type: object } } }
        '500':
          $ref: '#/components/responses/ServerError'
  /api/portals/v1/{portalShortcode}/env/{envName}/notificationConfigs/{configId}/test:
    post:
      summary: Sends a test notification for the given config and enrolleeRuleData
      tags: [ notifications ]
      operationId: test
      parameters:
        - { name: portalShortcode, in: path, required: true, schema: { type: string } }
        - { name: envName, in: path, required: true, schema: { type: string } }
        - { name: configId, in: path, required: true, schema: { type: string, format: uuid } }
      requestBody:
        required: true
        content: { application/json: { schema: { type: object } } }
      responses:
        '200':
          description: List of notifications
          content: { application/json: { schema: { type: object } } }
        '500':
          $ref: '#/components/responses/ServerError'
  /api/portals/v1/{portalShortcode}/studies/{studyShortcode}/env/{envName}/export/data:
    get:
      summary: Gets the export data in the specified format
      tags: [ export ]
      operationId: exportData
      parameters:
        - { name: portalShortcode, in: path, required: true, schema: { type: string } }
        - { name: studyShortcode, in: path, required: true, schema: { type: string } }
        - { name: envName, in: path, required: true, schema: { type: string } }
        - { name: splitOptionsIntoColumns, in: query, required: false, schema: { type: boolean, default: false } }
        - { name: stableIdsForOptions, in: query, required: false, schema: { type: boolean, default: false } }
        - { name: onlyIncludeMostRecent, in: query, required: false, schema: { type: boolean, default: true } }
        - { name: fileFormat, in: query, required: false, schema: { type: string, default: "TSV" } }
        - { name: limit, in: query, required: false, schema: { type: integer } }
      responses:
        '200':
          description: export data
          content: { text/plain: { schema: { type: string, format: binary } } }
        '500':
          $ref: '#/components/responses/ServerError'
  /api/portals/v1/{portalShortcode}/studies/{studyShortcode}/env/{envName}/export/dictionary:
    get:
      summary: Gets the export data dictionary
      tags: [ export ]
      operationId: exportDictionary
      parameters:
        - { name: portalShortcode, in: path, required: true, schema: { type: string } }
        - { name: studyShortcode, in: path, required: true, schema: { type: string } }
        - { name: envName, in: path, required: true, schema: { type: string } }
        - { name: splitOptionsIntoColumns, in: query, required: false, schema: { type: boolean, default: false } }
        - { name: stableIdsForOptions, in: query, required: false, schema: { type: boolean, default: false } }
        - { name: onlyIncludeMostRecent, in: query, required: false, schema: { type: boolean, default: true } }
        - { name: fileFormat, in: query, required: false, schema: { type: string, default: "TSV" } }
      responses:
        '200':
          description: export data
          content: { text/plain: { schema: { type: string, format: binary } } }
        '500':
          $ref: '#/components/responses/ServerError'
  /api/portals/v1/{portalShortcode}/env/{envName}/mailingList:
    get:
      summary: Gets the mailing list for the environment
      tags: [ mailingList ]
      operationId: get
      parameters:
        - { name: portalShortcode, in: path, required: true, schema: { type: string } }
        - { name: envName, in: path, required: true, schema: { type: string } }
      responses:
        '200':
          description: List of mailing list contacts
          content: { application/json: { schema: { type: object } } }
        '500':
          $ref: '#/components/responses/ServerError'
  /api/portals/v1/{portalShortcode}/env/{envName}/mailingList/{contactId}:
    delete:
      summary: Removes an entry from the mailing list
      tags: [ mailingList ]
      operationId: delete
      parameters:
        - { name: portalShortcode, in: path, required: true, schema: { type: string } }
        - { name: envName, in: path, required: true, schema: { type: string } }
        - { name: contactId, in: path, required: true, schema: { type: string, format: uuid } }
      responses:
        '204':
          description: indication of successful deletion
        '500':
          $ref: '#/components/responses/ServerError'
  /api/current-user/v1/unauthed/login:
    post:
      summary: Unauthenticated login (dev only)
      tags: [ currentUnauthedUser ]
      operationId: unauthedLogin
      parameters:
        - { name: username, in: query, required: true, schema: { type: string } }
      responses:
        '200':
          description: portal object
          content: { application/json: { schema: {type: object} } }
        '500':
          $ref: '#/components/responses/ServerError'
  /api/current-user/v1/unauthed/refresh:
    post:
      summary: Token refresh
      tags: [ currentUnauthedUser ]
      operationId: refresh
      requestBody:
        required: true
        content: { application/json: { schema: { $ref: '#/components/schemas/TokenLoginInfo' } } }
      responses:
        '200':
          description: user object
          content: { application/json: { schema: {
            type: object
          } } }
        '500':
          $ref: '#/components/responses/ServerError'
  /api/current-user/v1/login:
    post:
      summary: Token login
      tags: [ currentUser ]
      operationId: login
      requestBody:
        required: true
        content: { application/json: { schema: {$ref: '#/components/schemas/TokenLoginInfo' } } }
      responses:
        '200':
          description: user object
          content: { application/json: { schema: {
            type: object
          } } }
        '500':
          $ref: '#/components/responses/ServerError'
  /api/current-user/v1/refresh:
    post:
      summary: Token refresh
      tags: [ currentUser ]
      operationId: refresh
      requestBody:
        required: true
        content: { application/json: { schema: { $ref: '#/components/schemas/TokenLoginInfo' } } }
      responses:
        '200':
          description: user object
          content: { application/json: { schema: {
            type: object
          } } }
        '500':
          $ref: '#/components/responses/ServerError'
  /api/adminUsers/v1:
    get:
      summary: Gets all admin users
      tags: [ admin_user ]
      operationId: getAll
      responses:
        '200':
          description: List of admin users with portals and roles attached
          content: { application/json: { schema: { type: object } } }
        '500':
          $ref: '#/components/responses/ServerError'
    post:
      summary: Creates a new admin user
      tags: [ admin_user ]
      operationId: create
      requestBody:
        required: true
        content: { application/json: { schema: { type: object } } }
      responses:
        '200':
          description: the new user
          content: { application/json: { schema: { type: object } } }
        '500':
          $ref: '#/components/responses/ServerError'
  /api/adminUser/v1/{id}:
    get:
      summary: Gets an admin user
      tags: [ admin_user ]
      operationId: get
      parameters:
        - { name: id, in: path, required: true, schema: { type: string, format: uuid } }
      responses:
        '200':
          description: admin user object
          content: { application/json: { schema: {$ref: '#/components/schemas/AdminUserDto' }}}
        '404':
          description: admin user not found
        '500':
          $ref: '#/components/responses/ServerError'

  /api/adminUser/v1/{id}/roles:
    post:
      summary: Sets/updates the roles for an admin user
      tags: [ admin_user ]
      operationId: setRoles
      parameters:
        - { name: id, in: path, required: true, schema: { type: string, format: uuid } }
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RoleList'
      responses:
        '200':
          description: roles updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoleList'
        '500':
          $ref: '#/components/responses/ServerError'
  /api/portals/v1/{portalShortcode}/env/{envName}:
    patch:
      summary: Updates an environment (shallow), such as to change site content.
      tags: [ portalEnvironment ]
      operationId: update
      parameters:
        - { name: portalShortcode, in: path, required: true, schema: { type: string } }
        - { name: envName, in: path, required: true, schema: { type: string } }
      requestBody:
        required: true
        content: { application/json: { schema: { type: object } } }
      responses:
        '200':
          description: PortalEnvironmentChangeRecord object
          content: { application/json: { schema: { type: object } } }
        '500':
          $ref: '#/components/responses/ServerError'
  /api/portals/v1/{portalShortcode}/env/{targetEnv}/diff:
    get:
      summary: Gets the diff between one environment and another
      tags: [ portalEnvironment ]
      operationId: diff
      parameters:
        - { name: portalShortcode, in: path, required: true, schema: { type: string } }
        - { name: targetEnv, in: path, required: true, schema: { type: string } }
        - { name: sourceEnv, in: query, required: true, schema: { type: string } }
      responses:
        '200':
          description: PortalEnvironmentChangeRecord object
          content: { application/json: { schema: { type: object } } }
        '500':
          $ref: '#/components/responses/ServerError'
  /api/portals/v1/{portalShortcode}/env/{targetEnv}/diff/apply:
    post:
      summary: Updates a portal environment according to the update object obtained from a diff operation
      tags: [ portalEnvironment ]
      operationId: apply
      parameters:
        - { name: portalShortcode, in: path, required: true, schema: { type: string } }
        - { name: targetEnv, in: path, required: true, schema: { type: string } }
        - { name: sourceEnv, in: query, required: false, schema: { type: string } }
      requestBody:
        required: false
        content: { application/json: { schema: { type: object } } }
      responses:
        '200':
          description: PortalEnvironment object
          content: { application/json: { schema: { type: object } } }
        '500':
          $ref: '#/components/responses/ServerError'
  /api/portals/v1/{portalShortcode}/env/{env}/config:
    patch:
      summary: Updates a portal environment config according to the update object
      tags: [ portalEnvironmentConfig ]
      operationId: update
      parameters:
        - { name: portalShortcode, in: path, required: true, schema: { type: string } }
        - { name: env, in: path, required: true, schema: { type: string } }
      requestBody:
        required: true
        content: { application/json: { schema: { type: object } } }
      responses:
        '200':
          description: PortalEnvironmentConfig object
          content: { application/json: { schema: { type: object } } }
        '500':
          $ref: '#/components/responses/ServerError'
  /api/internal/v1/config:
    get:
      summary: Lists non-sensitive config values
      tags: [ config ]
      operationId: get
      responses:
        '200':
          description: config object
          content:
            application/json:
              schema:
                type: object
        '500':
          $ref: '#/components/responses/ServerError'
  /api/internal/v1/populate/baseSeed:
    post:
      summary: Populates
      tags: [ populate ]
      operationId: populateBaseSeed
      responses:
        '201':
          description: stats object
          content:
            application/json:
              schema:
                type: object
        '500':
          $ref: '#/components/responses/ServerError'
  /api/internal/v1/populate/adminConfig:
    post:
      summary: Populates admin config
      tags: [ populate ]
      operationId: populateAdminConfig
      parameters:
        - { name: overwrite, in: query, required: false, schema: { type: boolean } }
      responses:
        '201':
          description: summary stats for the operation
          content:
            application/json:
              schema:
                type: object
        '500':
          $ref: '#/components/responses/ServerError'
  /api/internal/v1/populate/portal:
    post:
      summary: Populates
      tags: [ populate ]
      operationId: populatePortal
      parameters:
        - { name: filePathName, in: query, required: true, schema: { type: string } }
        - { name: overwrite, in: query, required: false, schema: { type: boolean } }
      responses:
        '201':
          description: portal object
          content:
            application/json:
              schema:
                type: object
        '500':
          $ref: '#/components/responses/ServerError'
  /api/internal/v1/populate/siteContent/{portalShortcode}:
    post:
      summary: Populates a siteContent to a given portal
      tags: [ populate ]
      operationId: populateSiteContent
      parameters:
        - { name: portalShortcode, in: path, required: true, schema: { type: string } }
        - { name: filePathName, in: query, required: true, schema: { type: string } }
        - { name: overwrite, in: query, required: false, schema: { type: boolean } }
      responses:
        '201':
          description: siteContent object
          content:
            application/json:
              schema:
                type: object
        '500':
          $ref: '#/components/responses/ServerError'
  /api/internal/v1/populate/survey/{portalShortcode}:
    post:
      summary: Populates a survey to a given portal
      tags: [ populate ]
      operationId: populateSurvey
      parameters:
        - { name: portalShortcode, in: path, required: true, schema: { type: string } }
        - { name: filePathName, in: query, required: true, schema: { type: string } }
        - { name: overwrite, in: query, required: false, schema: { type: boolean } }
      responses:
        '201':
          description: survey object
          content:
            application/json:
              schema:
                type: object
        '500':
          $ref: '#/components/responses/ServerError'
  /api/internal/v1/populate/enrollee/{portalShortcode}/env/{envName}/study/{studyShortcode}:
    post:
      summary: Populates an Enrollee to a given portal/study/env.
      tags: [ populate ]
      operationId: populateEnrollee
      parameters:
        - { name: portalShortcode, in: path, required: true, schema: { type: string } }
        - { name: envName, in: path, required: true, schema: { type: string } }
        - { name: studyShortcode, in: path, required: true, schema: { type: string } }
        - { name: filePathName, in: query, required: true, schema: { type: string } }
        - { name: overwrite, in: query, required: false, schema: { type: boolean } }
      responses:
        '201':
          description: enrollee object
          content:
            application/json:
              schema:
                type: object
        '500':
          $ref: '#/components/responses/ServerError'
  /api/internal/v1/populate/enrollee/{portalShortcode}/env/{envName}/study/{studyShortcode}/bulk:
    post:
      summary: Bulk populates enrollees in a given portal/study/env.
      tags: [ populate ]
      operationId: bulkPopulateEnrollees
      parameters:
        - { name: portalShortcode, in: path, required: true, schema: { type: string } }
        - { name: envName, in: path, required: true, schema: { type: string } }
        - { name: studyShortcode, in: path, required: true, schema: { type: string } }
        - { name: numEnrollees, in: query, required: true, schema: { type: integer } }
      responses:
        '204':
          description: No Content
        '500':
          $ref: '#/components/responses/ServerError'
  /api/portals/v1/{portalShortcode}/studies/{studyShortcode}/env/{envName}/datarepo/datasets:
    get:
      summary: Gets the list of datasets for the study environment
      tags: [ datarepo ]
      operationId: listDatasetsForStudyEnvironment
      parameters:
        - { name: portalShortcode, in: path, required: true, schema: { type: string } }
        - { name: studyShortcode, in: path, required: true, schema: { type: string } }
        - { name: envName, in: path, required: true, schema: { type: string } }
      responses:
        '200':
          description: dataset
          content: { application/json: { schema: { type: object } } }
        '500':
          $ref: '#/components/responses/ServerError'
    post:
      summary: Creates a new TDR dataset for the study environment
      tags: [ datarepo ]
      operationId: createDatasetForStudyEnvironment
      parameters:
        - { name: portalShortcode, in: path, required: true, schema: { type: string } }
        - { name: studyShortcode, in: path, required: true, schema: { type: string } }
        - { name: envName, in: path, required: true, schema: { type: string } }
      requestBody:
        required: true
        content: { application/json: { schema: { $ref: '#/components/schemas/CreateDataset' } } }
      responses:
        '202':
          description: Accepted
        '500':
          $ref: '#/components/responses/ServerError'
  /api/portals/v1/{portalShortcode}/studies/{studyShortcode}/env/{envName}/datarepo/datasets/{datasetName}:
    delete:
      summary: Deletes the specified TDR dataset
      tags: [ datarepo ]
      operationId: deleteDataset
      parameters:
        - { name: portalShortcode, in: path, required: true, schema: { type: string } }
        - { name: studyShortcode, in: path, required: true, schema: { type: string } }
        - { name: envName, in: path, required: true, schema: { type: string } }
        - { name: datasetName, in: path, required: true, schema: { type: string } }
      responses:
        '202':
          description: Accepted
        '500':
          $ref: '#/components/responses/ServerError'
  /api/portals/v1/{portalShortcode}/studies/{studyShortcode}/env/{envName}/datarepo/datasets/{datasetName}/jobs:
    get:
      summary: Gets the job history for a study environment TDR dataset
      tags: [ datarepo ]
      operationId: getJobHistoryForDataset
      parameters:
        - { name: portalShortcode, in: path, required: true, schema: { type: string } }
        - { name: studyShortcode, in: path, required: true, schema: { type: string } }
        - { name: envName, in: path, required: true, schema: { type: string } }
        - { name: datasetName, in: path, required: true, schema: { type: string } }
      responses:
        '200':
          description: dataset job history
          content: { application/json: { schema: { type: object } } }
        '500':
          $ref: '#/components/responses/ServerError'
  /api/portals/v1/{portalShortcode}/siteImages:
    get:
      summary: Returns a list of the metadata for the images in the portal -- does not return the image files themselves
      tags: [ siteImage ]
      operationId: list
      parameters:
        - { name: portalShortcode, in: path, required: true, schema: { type: string } }
      responses:
        '200':
          description: image data
          content: { application/json: { schema: { type: object } } }
        '500':
          $ref: '#/components/responses/ServerError'
  /api/portals/v1/{portalShortcode}/siteImages/upload/{uploadFileName}/{version}:
    post:
      summary: upload an image
      tags: [ siteImage ]
      operationId: upload
      parameters:
        - { name: portalShortcode, in: path, required: true, schema: { type: string } }
        - { name: uploadFileName, in: path, required: true, schema: { type: string } }
        - { name: version, in: path, required: true, schema: { type: integer } }
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                image:
                  type: string
                  format: binary
      responses:
        '200':
          description: image data
          content: { application/json: { schema: { type: object } } }
        '500':
          $ref: '#/components/responses/ServerError'
  /api/public/portals/v1/{portalShortcode}/env/{envName}/siteImages/{version}/{cleanFileName}:
    get:
      summary: Returns the binary image data for the image of the given shortcode
      tags: [ siteImage ]
      operationId: get
      parameters:
        - { name: portalShortcode, in: path, required: true, schema: { type: string } }
        - { name: envName, in: path, required: true, schema: { type: string } }
        - { name: cleanFileName, in: path, required: true, schema: { type: string } }
        - { name: version, in: path, required: true, schema: { type: integer } }
      responses:
        '200':
          description: image data
          content:
            image/*: # see https://superuser.com/questions/979135/is-there-a-generic-mime-type-for-all-image-files
              schema:
                type: string
                format: binary
        '500':
          $ref: '#/components/responses/ServerError'
  /api/portals/v1/{portalShortcode}/studies/{studyShortcode}/env/{envName}/enrolleesWithKits:
    get:
      summary: Gets a list of enrollees with tasks and kit requests
      tags: [ enrollee ]
      operationId: enrolleesWithKits
      parameters:
        - { name: portalShortcode, in: path, required: true, schema: { type: string } }
        - { name: studyShortcode, in: path, required: true, schema: { type: string } }
        - { name: envName, in: path, required: true, schema: { type: string } }
      responses:
        '200':
          description: enrollee list
          content: { application/json: { schema: { type: object } } }
        '500':
          $ref: '#/components/responses/ServerError'
  /api/portals/v1/{portalShortcode}/studies/{studyShortcode}/env/{envName}/kits:
    get:
      summary: Gets a list of kits for a study
      tags: [ kit ]
      operationId: kitsByStudyEnvironment
      parameters:
        - { name: portalShortcode, in: path, required: true, schema: { type: string } }
        - { name: studyShortcode, in: path, required: true, schema: { type: string } }
        - { name: envName, in: path, required: true, schema: { type: string } }
      responses:
        '200':
          description: kit list
          content: { application/json: { schema: { type: object } } }
        '500':
          $ref: '#/components/responses/ServerError'
  /api/portals/v1/{portalShortcode}/studies/{studyShortcode}/env/{envName}/kits/refreshKitStatuses:
    post:
      summary: Fetch kit statuses from Pepper and cache in the Juniper database
      tags: [ kit ]
      operationId: refreshKitStatuses
      parameters:
        - { name: portalShortcode, in: path, required: true, schema: { type: string } }
        - { name: studyShortcode, in: path, required: true, schema: { type: string } }
        - { name: envName, in: path, required: true, schema: { type: string } }
      responses:
        '204':
          description: Success
        '500':
          $ref: '#/components/responses/ServerError'

components:
  responses:
    SystemStatusResponse:
      description: A JSON description of the subsystems and their statuses.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SystemStatus'

    # Error Responses
    BadRequest:
      description: Bad request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorReport'
    PermissionDenied:
      description: Permission denied
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorReport'
    NotFound:
      description: Not found (or unauthorized)
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorReport'
    ServerError:
      description: Server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorReport'

  schemas:
    TokenLoginInfo:
      type: object
      properties:
        token: {type: string}
    StudyEnvironmentDto:
      type: object
      properties:
        id: { type: string, format: uuid }
        preEnrollSurveyId: { type: string, format: uuid }
    AdminUserDto:
      type: object
      properties:
        id: { type: string, format: uuid }
        username: { type: string }
        lastLogin: { type: integer }
        superuser: { type: boolean }
    ErrorReport:
      type: object
      required: [ message, statusCode ]
      properties:
        message:
          type: string
        statusCode:
          type: integer
    PortalShallowDto:
      type: object
      properties:
        id: {type: string, format: uuid}
        shortcode: {type: string}
        name: {type: string}
        portalStudies: {type: array}
    RoleList:
      type: object
      properties:
        roles:
          type: array
          items: { type: string }
      required: [ roles ]
    PortalDto:
      type: object
    CreateDataset:
      properties:
        name:
          type: string
        description:
          type: string
    SystemStatus:
      required: [ ok, systems ]
      type: object
      properties:
        ok:
          type: boolean
          description: whether any system(s) need attention
        systems:
          type: object
          additionalProperties:
            type: object
            properties:
              ok:
                type: boolean
              messages:
                type: array
                items:
                  type: string

    VersionProperties:
      type: object
      properties:
        gitTag:
          type: string
        gitHash:
          type: string
        github:
          type: string
        build:
          type: string

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer

security:
  - bearerAuth: [ ]
