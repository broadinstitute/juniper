
openapi: 3.0.3
info:
  title: Juniper Admin API
  description: API for portal and study management
  version: 0.0.1
paths:
  /status:
    get:
      summary: Check status of the service
      tags: [ public ]
      operationId: getStatus
      security: [ ]
      responses:
        '200':
          $ref: '#/components/responses/SystemStatusResponse'
        '500':
          $ref: '#/components/responses/ServerError'
        '503':
          $ref: '#/components/responses/SystemStatusResponse'

  /version:
    get:
      summary: Get version info of the deployed service
      tags: [ public ]
      operationId: getVersion
      security: [ ]
      responses:
        '200':
          description: Version information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VersionProperties'
        '404':
          description: "Version not configured"
        '500':
          $ref: '#/components/responses/ServerError'

  /config:
    get:
      summary: Get configuration info for authenticating with and using the API
      tags: [ public ]
      operationId: getConfig
      security: [ ]
      responses:
        '200':
          description: Configuration information
          content: &jsonContent { application/json: { schema: { type: object } } }
  /api/portals/v1:
    get:
      summary: Gets a list of portals for the user
      tags: [ portal ]
      operationId: getAll
      responses:
        '200':
          description: list of portal objects
          content: *jsonContent
        '500':
          $ref: '#/components/responses/ServerError'
  /api/portals/v1/{portalShortcode}:
    get:
      summary: Gets the portal object
      tags: [ portal ]
      operationId: get
      parameters:
        - &portalShortcodeParam { name: portalShortcode, in: path, required: true, schema: { type: string } }
        - { name: language, in: query, required: false, schema: { type: string } }
      responses:
        '200':
          description: portal object
          content: *jsonContent
        '500':
          $ref: '#/components/responses/ServerError'
  /api/i18n/v1:
    get:
      summary: Lists the language texts for a given language
      tags: [ i18n ]
      operationId: listLanguageTexts
      parameters:
        - { name: language, in: query, required: true, schema: { type: string } }
        - { name: portalShortcode, in: query, required: false, schema: { type: string } }
      responses:
        '200':
          description: OK
          content: *jsonContent
        '500':
          $ref: '#/components/responses/ServerError'

  /api/portals/v1/{portalShortcode}/studies/{studyShortcode}/env/{envName}/adminTasks:
    get:
      summary: Gets all the admin tasks for this study environment
      tags: [ participantTask ]
      operationId: getByStudyEnvironment
      parameters:
        - *portalShortcodeParam
        - &studyShortcodeParam { name: studyShortcode, in: path, required: true, schema: { type: string } }
        - &envNameParam { name: envName, in: path, required: true, schema: { type: string } }
        - { name: include, in: query, required: false, schema: { type: string } }
      responses:
        '200':
          description: List of admin-assigned participant tasks
          content: *jsonContent
        '500':
          $ref: '#/components/responses/ServerError'
  /api/portals/v1/{portalShortcode}/studies/{studyShortcode}/env/{envName}/adminTasks/{id}:
    patch:
      summary: Updates the specified task
      tags: [ participantTask ]
      operationId: update
      parameters:
        - *portalShortcodeParam
        - *studyShortcodeParam
        - *envNameParam
        - { name: id, in: path, required: true, schema: { type: string, format: uuid } }
      requestBody:
        required: true
        content: *jsonContent
      responses:
        '200':
          description: The updated task
          content: *jsonContent
        '500':
          $ref: '#/components/responses/ServerError'
  /api/portals/v1/{portalShortcode}/surveys/{stableId}/{version}:
    get:
      summary: gets the requested survey
      tags: [ survey ]
      operationId: get
      parameters:
        - *portalShortcodeParam
        - &stableIdParam { name: stableId, in: path, required: true, schema: { type: string } }
        - &versionParam { name: version, in: path, required: true, schema: { type: integer } }
      responses:
        '200':
          description: survey object
          content: *jsonContent
        '500':
          $ref: '#/components/responses/ServerError'
  /api/portals/v1/{portalShortcode}/surveys/{stableId}:
    delete:
      summary: deletes the specified survey, will fail if the survey has any responses or is in use by a non-sandbox environment
      tags: [ survey ]
      operationId: delete
      parameters:
        - *portalShortcodeParam
        - *stableIdParam
      responses:
        '204':
          description: No Content
        '500':
          $ref: '#/components/responses/ServerError'
  /api/portals/v1/{portalShortcode}/surveys/{stableId}/metadata:
    get:
      summary: gets metadata for all versions of the requested survey
      tags: [ survey ]
      operationId: getAllVersions
      parameters:
        - *portalShortcodeParam
        - *stableIdParam
      responses:
        '200':
          description: list of survey version metadata
          content: *jsonContent
        '500':
          $ref: '#/components/responses/ServerError'
  /api/portals/v1/{portalShortcode}/surveys:
    post:
      summary: creates the requested survey, will fail if the given stableId already exists
      tags: [ survey ]
      operationId: create
      parameters:
        - *portalShortcodeParam
      requestBody:
        required: true
        content: *jsonContent
      responses:
        '200':
          description: saved survey object
          content: *jsonContent
        '500':
          $ref: '#/components/responses/ServerError'
  /api/portals/v1/{portalShortcode}/surveys/{stableId}/newVersion:
    post:
      summary: Saves the survey as a new version
      tags: [ survey ]
      operationId: newVersion
      parameters:
        - *portalShortcodeParam
        - *stableIdParam
      requestBody:
        required: true
        content: *jsonContent
      responses:
        '200':
          description: saved survey object
          content: *jsonContent
        '500':
          $ref: '#/components/responses/ServerError'
  /api/portals/v1/{portalShortcode}/studies/{studyShortcode}/configuredSurveys/findWithNoContent:
    get:
      summary: Lists all the configured surveys for a study
      tags: [ configuredSurvey ]
      operationId: findWithNoContent
      parameters:
        - *portalShortcodeParam
        - *studyShortcodeParam
        - { name: envName, in: query, required: false, schema: { type: string } }
        - { name: stableId, in: query, required: false, schema: { type: string } }
        - { name: active, in: query, required: false, schema: { type: string, format: boolean } }
      responses:
        '200':
          description: list of all the configured surveys for a study
          content: *jsonContent
        '500':
          $ref: '#/components/responses/ServerError'
  /api/portals/v1/{portalShortcode}/studies/{studyShortcode}/env/{envName}/configuredSurveys:
    post:
      summary: Creates a configured survey in a study environment
      tags: [ configuredSurvey ]
      operationId: create
      parameters:
        - *portalShortcodeParam
        - *studyShortcodeParam
        - *envNameParam
      requestBody:
        required: true
        content: *jsonContent
      responses:
        '200':
          description: saved configuredSurvey object
          content: *jsonContent
        '500':
          $ref: '#/components/responses/ServerError'
    patch:
      summary: Updates a list of configured surveys, such as by changing order
      tags: [ configuredSurvey ]
      operationId: patch
      parameters:
        - *portalShortcodeParam
        - *studyShortcodeParam
        - *envNameParam
      requestBody:
        required: true
        content: *jsonContent
      responses:
        '200':
          description: list of saved configuredSurvey objects
          content: *jsonContent
        '500':
          $ref: '#/components/responses/ServerError'
  /api/portals/v1/{portalShortcode}/studies/{studyShortcode}/env/{envName}/configuredSurveys/replace:
    post:
      summary: Sets a configured survey on the environment, deactivating any existing configured surveys with the same stableId.
      tags: [ configuredSurvey ]
      operationId: replace
      parameters:
        - *portalShortcodeParam
        - *studyShortcodeParam
        - *envNameParam
      requestBody:
        required: true
        content: *jsonContent
      responses:
        '200':
          description: saved new configuredSurvey object
          content: *jsonContent
        '500':
          $ref: '#/components/responses/ServerError'
  /api/portals/v1/{portalShortcode}/studies/{studyShortcode}/env/{envName}/configuredSurveys/{configSurveyId}:
    delete:
      summary: Removes a configured survey from a study environment
      tags: [ configuredSurvey ]
      operationId: remove
      parameters:
        - *portalShortcodeParam
        - *studyShortcodeParam
        - *envNameParam
        - { name: configSurveyId, in: path, required: true, schema: { type: string, format: uuid } }
      responses:
        '204':
          description: No Content
        '500':
          $ref: '#/components/responses/ServerError'
  /api/portals/v1/{portalShortcode}/studies/{studyShortcode}/env/{envName}/enrollee/{enrolleeShortcode}/surveys/{stableId}/{version}:
    patch:
      summary: creates or updates a response with answers
      tags: [ surveyResponse ]
      operationId: update
      parameters:
        - *portalShortcodeParam
        - *envNameParam
        - *studyShortcodeParam
        - &enrolleeShortcodeParam { name: enrolleeShortcode, in: path, required: true, schema: { type: string } }
        - { name: stableId, in: path, required: false, schema: { type: string } }
        - *versionParam
        - { name: taskId, in: query, required: false, schema: { type: string, format: uuid } }
      requestBody:
        content:
          application/json:
            schema: { type: object }
      responses:
        '200':
          description: hub response object
          content: *jsonContent
        '500':
          $ref: '#/components/responses/ServerError'
  /api/portals/v1/{portalShortcode}/siteContents/{stableId}:
    get:
      summary: Returns available versions of the given site content with the stableID
      tags: [ siteContent ]
      operationId: versionList
      parameters:
        - *portalShortcodeParam
        - *stableIdParam
      responses:
        '200':
          description: list of (shallow) SiteContent objects
          content: *jsonContent
        '500':
          $ref: '#/components/responses/ServerError'
    post:
      summary: Saves a new version of the given sitecontent.  Returns the saved content
      tags: [ siteContent ]
      operationId: create
      parameters:
        - *portalShortcodeParam
        - *stableIdParam
      requestBody:
        required: true
        content: *jsonContent
      responses:
        '200':
          description: list of (shallow) SiteContent objects
          content: *jsonContent
        '500':
          $ref: '#/components/responses/ServerError'
  /api/portals/v1/{portalShortcode}/siteContents/{stableId}/{version}:
    get:
      summary: Returns the site content with the given stableId/version, along with all child content in the specified language (english is default)
      tags: [ siteContent ]
      operationId: get
      parameters:
        - *portalShortcodeParam
        - *stableIdParam
        - *versionParam
      responses:
        '200':
          description: SiteContent object with all dependent relations attached
          content: *jsonContent
        '500':
          $ref: '#/components/responses/ServerError'
  /api/portals/v1/{portalShortcode}/env/{envName}/siteContent:
    get:
      summary: Returns the site content with for the given portal environment, along with all child content in the specified language (english is default)
      tags: [ siteContent ]
      operationId: getCurrent
      parameters:
        - *portalShortcodeParam
        - *envNameParam
      responses:
        '200':
          description: SiteContent object with all dependent relations attached
          content: *jsonContent
        '500':
          $ref: '#/components/responses/ServerError'
  /api/portals/v1/{portalShortcode}/studies:
    get:
      summary: gets all the studies for the given portal
      tags: [ study ]
      operationId: getByPortalWithEnvs
      parameters:
        - *portalShortcodeParam
        - { name: envName, in: query, required: false, schema: { type: string } }
      responses:
        '200':
          description: new study object
          content: *jsonContent
        '500':
          $ref: '#/components/responses/ServerError'
    post:
      summary: creates a new study for the given portal
      tags: [ study ]
      operationId: create
      parameters:
        - *portalShortcodeParam
      requestBody:
        required: true
        content: *jsonContent
      responses:
        '200':
          description: new study object
          content: *jsonContent
        '500':
          $ref: '#/components/responses/ServerError'
  /api/portals/v1/{portalShortcode}/studies/{studyShortcode}:
    delete:
      summary: deletes a study from all envs
      tags: [ study ]
      operationId: delete
      parameters:
        - *portalShortcodeParam
        - *studyShortcodeParam
      responses:
        '204':
          description: no content
        '500':
          $ref: '#/components/responses/ServerError'
  /api/portals/v1/{portalShortcode}/studies/{studyShortcode}/env/{envName}/kitTypes:
    get:
      summary: Gets the kit types for a study
      tags: [ studyEnvironment ]
      operationId: getKitTypes
      parameters:
        - *portalShortcodeParam
        - *studyShortcodeParam
        - *envNameParam
      responses:
        '200':
          description: List of kit types
          content: *jsonContent
        '500':
          $ref: '#/components/responses/ServerError'
    patch:
      summary: Updates the configured kit types for a study
      tags: [ studyEnvironment ]
      operationId: updateKitTypes
      parameters:
        - *portalShortcodeParam
        - *studyShortcodeParam
        - *envNameParam
      requestBody:
        required: true
        description: kit type list dto
        content: *jsonContent
      responses:
        '200':
          description: List of kit types
          content: *jsonContent
        '500':
          $ref: '#/components/responses/ServerError'
  /api/portals/v1/{portalShortcode}/studies/{studyShortcode}/env/{envName}/allowedKitTypes:
    get:
      summary: Gets all kit types that can be configured for a study environment
      tags: [ studyEnvironment ]
      operationId: getAllowedKitTypes
      parameters:
        - *portalShortcodeParam
        - *studyShortcodeParam
        - *envNameParam
      responses:
        '200':
          description: List of kit types
          content: *jsonContent
        '500':
          $ref: '#/components/responses/ServerError'
  /api/portals/v1/{portalShortcode}/studies/{studyShortcode}/env/{envName}/requestKits:
    post:
      summary: Request sample kits for a batch of enrollees
      tags: [ kit ]
      operationId: requestKits
      parameters:
        - *portalShortcodeParam
        - *studyShortcodeParam
        - *envNameParam
      requestBody:
        required: true
        description: kit request list creation dto
        content: *jsonContent
      responses:
        '200':
          description: Kit requests
          content: *jsonContent
        '500':
          $ref: '#/components/responses/ServerError'
  /api/portals/v1/{portalShortcode}/studies/{studyShortcode}/env/{envName}:
    patch:
      summary: Updates a study environment object, such as by setting the pre-enroll survey
      tags: [ studyEnvironment ]
      operationId: patch
      parameters:
        - *portalShortcodeParam
        - *studyShortcodeParam
        - *envNameParam
      requestBody:
        required: true
        content: { application/json: { schema: { $ref: '#/components/schemas/StudyEnvironmentDto' } } }
      responses:
        '200':
          description: saved studyEnvironment object
          content: { application/json: { schema: { $ref: '#/components/schemas/StudyEnvironmentDto' } } }
        '500':
          $ref: '#/components/responses/ServerError'
  /api/portals/v1/{portalShortcode}/studies/{studyShortcode}/env/{envName}/config:
    patch:
      summary: Updates a study environment config object, such as setting password
      tags: [ studyEnvironment ]
      operationId: patchConfig
      parameters:
        - *portalShortcodeParam
        - *studyShortcodeParam
        - *envNameParam
      requestBody:
        required: true
        content: *jsonContent
      responses:
        '200':
          description: saved studyEnvironment object
          content: *jsonContent
        '500':
          $ref: '#/components/responses/ServerError'
  /api/portals/v1/{portalShortcode}/studies/{studyShortcode}/env/{envName}/stats:
    get:
      summary: Returns stats about the study environment
      tags: [ studyEnvironment ]
      operationId: stats
      parameters:
        - *portalShortcodeParam
        - *studyShortcodeParam
        - *envNameParam
      responses:
        '200':
          description: saved studyEnvironment object
          content: *jsonContent
        '500':
          $ref: '#/components/responses/ServerError'
  /api/portals/v1/{portalShortcode}/env/{envName}/participantUsers:
    get:
      summary: lists all the participant users for the given portal environment
      tags: [ participantUser ]
      operationId: list
      parameters:
        - *portalShortcodeParam
        - *envNameParam
      responses:
        '200':
          description: list of participant users and list of enrollees
          content: *jsonContent
        '500':
          $ref: '#/components/responses/ServerError'
  /api/portals/v1/{portalShortcode}/studies/{studyShortcode}/env/{envName}/enrollee/search/v2/facets:
    get:
      summary: Gets all of the possible fields which can be searched on within the provided portal.
      tags: [ enrolleeSearch ]
      operationId: getExpressionSearchFacets
      parameters:
        - *portalShortcodeParam
        - *studyShortcodeParam
        - *envNameParam
      responses:
        '200':
          description: List of valid search fields
          content: *jsonContent
        '500':
          $ref: '#/components/responses/ServerError'
  /api/portals/v1/{portalShortcode}/studies/{studyShortcode}/env/{envName}/enrollee/search/v2:
    get:
      summary: Searches using a search expression.
      tags: [ enrolleeSearch ]
      operationId: executeSearchExpression
      parameters:
        - *portalShortcodeParam
        - *studyShortcodeParam
        - *envNameParam
        - { name: expression, in: query, required: true, schema: { type: string } }
        - { name: limit, in: query, required: false, schema: { type: integer } }
      responses:
        '200':
          description: List of results, including any linked objects that were searched upon
          content: *jsonContent
        '500':
          $ref: '#/components/responses/ServerError'
  /api/portals/v1/{portalShortcode}/studies/{studyShortcode}/env/{envName}/metrics/{metricName}:
    get:
      summary: Loads the specified metric for the given study env
      tags: [ metrics ]
      operationId: metricByName
      parameters:
        - *portalShortcodeParam
        - *studyShortcodeParam
        - *envNameParam
        - { name: metricName, in: path, required: true, schema: { type: string } }
      responses:
        '200':
          description: BasicMetricDatum objects
          content: *jsonContent
        '500':
          $ref: '#/components/responses/ServerError'
  /api/portals/v1/{portalShortcode}/studies/{studyShortcode}/env/{envName}/participantTasks/findAll:
    get:
      summary: finds the given tasks
      tags: [ participantTask ]
      operationId: findAll
      parameters:
        - *portalShortcodeParam
        - *studyShortcodeParam
        - *envNameParam
        - { name: targetStableId, in: query, required: true, schema: { type: string } }
      responses:
        '200':
          description: ParticipantTask objects
          content: *jsonContent
        '500':
          $ref: '#/components/responses/ServerError'
  /api/portals/v1/{portalShortcode}/studies/{studyShortcode}/env/{envName}/participantTasks/updateAll:
    post:
      summary: Updates the specified tasks to the specified versions
      tags: [ participantTask ]
      operationId: updateAll
      parameters:
        - *portalShortcodeParam
        - *studyShortcodeParam
        - *envNameParam
      requestBody:
        required: true
        content: *jsonContent
      responses:
        '200':
          description: updated ParticipantTask objects
          content: *jsonContent
        '500':
          $ref: '#/components/responses/ServerError'
  /api/portals/v1/{portalShortcode}/studies/{studyShortcode}/env/{envName}/participantTasks/assignToEnrollees:
    post:
      summary: Assigns the specified tasks according to the passed-in ParticipantTaskAssignDto
      tags: [ participantTask ]
      operationId: assignToEnrollees
      parameters:
        - *portalShortcodeParam
        - *studyShortcodeParam
        - *envNameParam
      requestBody:
        required: true
        content: *jsonContent
      responses:
        '200':
          description: updated ParticipantTask objects
          content: *jsonContent
        '500':
          $ref: '#/components/responses/ServerError'
  /api/portals/v1/{portalShortcode}/studies/{studyShortcode}/env/{envName}/enrollees/{enrolleeShortcodeOrId}:
    get:
      summary: Finds an enrollee by shortcode or id
      tags: [ enrollee ]
      operationId: find
      parameters:
        - *portalShortcodeParam
        - *studyShortcodeParam
        - *envNameParam
        - { name: enrolleeShortcodeOrId, in: path, required: true, schema: { type: string } }
      responses:
        '200':
          description: Enrollee object
          content: *jsonContent
        '500':
          $ref: '#/components/responses/ServerError'
  /api/portals/v1/{portalShortcode}/studies/{studyShortcode}/env/{envName}/enrollees/{enrolleeShortcode}/withdraw:
    post:
      summary: withdraws the given enrollee from the study
      tags: [ enrollee ]
      operationId: withdraw
      parameters:
        - *portalShortcodeParam
        - *studyShortcodeParam
        - *envNameParam
        - *enrolleeShortcodeParam
      responses:
        '200':
          description: withdrawnEnrollee id
          content: *jsonContent
        '500':
          $ref: '#/components/responses/ServerError'
  /api/portals/v1/{portalShortcode}/studies/{studyShortcode}/env/{envName}/withdrawnEnrollees:
    get:
      summary: gets list of withdrawn participants (with no data attached)
      tags: [ withdrawnEnrollee ]
      operationId: getAll
      parameters:
        - { name: portalShortcode, in: path, required: true, schema: { type: string } }
        - { name: studyShortcode, in: path, required: true, schema: { type: string } }
        - { name: envName, in: path, required: true, schema: { type: string } }
      responses:
        '200':
          description: withdrawnEnrollee list
          content: { application/json: { schema: { type: object } } }
        '500':
          $ref: '#/components/responses/ServerError'
  /api/portals/v1/{portalShortcode}/studies/{studyShortcode}/env/{envName}/enrolleeRelations/byTarget/{enrolleeShortcode}:
    get:
      summary: Finds all of the relations that the given enrollee is a target of. Includes the full enrollee objects.
      tags: [ enrolleeRelation ]
      operationId: findRelationsForTargetEnrollee
      parameters:
        - *portalShortcodeParam
        - *studyShortcodeParam
        - *envNameParam
        - *enrolleeShortcodeParam
      responses:
        '200':
          description: Enrollee object
          content: *jsonContent
        '500':
          $ref: '#/components/responses/ServerError'
  /api/portals/v1/{portalShortcode}/studies/{studyShortcode}/env/{envName}/notifications/byEnrollee/{enrolleeShortcode}:
    get:
      summary: List the notifications sent/pending for an enrollee
      tags: [ notifications ]
      operationId: find
      parameters:
        - *portalShortcodeParam
        - *studyShortcodeParam
        - *envNameParam
        - *enrolleeShortcodeParam
      responses:
        '200':
          description: List of notifications
          content: *jsonContent
        '500':
          $ref: '#/components/responses/ServerError'
  /api/portals/v1/{portalShortcode}/studies/{studyShortcode}/env/{envName}/notifications/byTrigger/{triggerId}:
    get:
      summary: List the notifications sent/pending by trigger configuration
      tags: [ notifications ]
      operationId: findAllByConfigId
      parameters:
        - *portalShortcodeParam
        - *studyShortcodeParam
        - *envNameParam
        - { name: triggerId, in: path, required: true, schema: { type: string, format: uuid } }
      responses:
        '200':
          description: List of notifications
          content: *jsonContent
        '500':
          $ref: '#/components/responses/ServerError'
  /api/portals/v1/{portalShortcode}/studies/{studyShortcode}/env/{envName}/enrollees/{enrolleeShortcode}/changeRecords:
    get:
      summary: List of data change records for an enrollee
      tags: [ enrollee ]
      operationId: listChangeRecords
      parameters:
        - *portalShortcodeParam
        - *studyShortcodeParam
        - *envNameParam
        - *enrolleeShortcodeParam
        - { name: modelName, in: query, required: false, schema: { type: string } }
      responses:
        '200':
          description: List of DataChangeRecords
          content: *jsonContent
        '500':
          $ref: '#/components/responses/ServerError'
  /api/portals/v1/{portalShortcode}/studies/{studyShortcode}/env/{envName}/profiles/byEnrollee/{enrolleeShortcode}:
    put:
      summary: Update this enrollee's profile
      tags: [ profile ]
      operationId: updateProfileForEnrollee
      requestBody:
        required: true
        description: profile with all desired changes
        content: *jsonContent
      parameters:
        - *portalShortcodeParam
        - *studyShortcodeParam
        - *envNameParam
        - *enrolleeShortcodeParam
      responses:
        '200':
          description: Updated profile
          content: *jsonContent
        '500':
          $ref: '#/components/responses/ServerError'
  /api/portals/v1/{portalShortcode}/studies/{studyShortcode}/env/{envName}/enrolleeRelations:
    post:
      summary: Creates a new relation between two enrollees; if creating a family relation,
        then they will also be added to the family (if not already).
      tags: [ enrolleeRelation ]
      operationId: create
      parameters:
        - *portalShortcodeParam
        - *studyShortcodeParam
        - *envNameParam
        - { name: justification, in: query, required: true, schema: { type: string } }
      requestBody:
        required: true
        description: enrollee relation
        content: *jsonContent
      responses:
        '200':
          description: List of DataChangeRecords
          content: *jsonContent
        '500':
          $ref: '#/components/responses/ServerError'
  /api/portals/v1/{portalShortcode}/studies/{studyShortcode}/env/{envName}/enrolleeRelations/{enrolleeRelationId}:
    delete:
      summary: Deletes a relation between two enrollees
      tags: [ enrolleeRelation ]
      operationId: delete
      parameters:
        - *portalShortcodeParam
        - *studyShortcodeParam
        - *envNameParam
        - { name: enrolleeRelationId, in: path, required: true, schema: { type: string, format: uuid } }
        - { name: justification, in: query, required: true, schema: { type: string } }
      responses:
        '200':
          description: Successful deletion
        '500':
          $ref: '#/components/responses/ServerError'
  /api/portals/v1/{portalShortcode}/studies/{studyShortcode}/env/{envName}/enrollees/{enrolleeShortcode}/events:
    get:
      summary: List of events relating to the specified enrollee
      tags: [ event ]
      operationId: getEventsByEnrollee
      parameters:
        - *portalShortcodeParam
        - *studyShortcodeParam
        - *envNameParam
        - *enrolleeShortcodeParam
      responses:
        '200':
          description: Events
          content: *jsonContent
        '500':
          $ref: '#/components/responses/ServerError'
  /api/portals/v1/{portalShortcode}/studies/{studyShortcode}/env/{envName}/enrollees/{enrolleeShortcode}/adminTasks:
    get:
      summary: List adminTasks related to an enrollee
      tags: [ participantTask ]
      operationId: getByEnrollee
      parameters:
        - *portalShortcodeParam
        - *studyShortcodeParam
        - *envNameParam
        - *enrolleeShortcodeParam
      responses:
        '200':
          description: Admin tasks
          content: *jsonContent
        '500':
          $ref: '#/components/responses/ServerError'
  /api/portals/v1/{portalShortcode}/studies/{studyShortcode}/env/{envName}/enrollees/{enrolleeShortcode}/kitRequests:
    get:
      summary: List kit requests for an enrollee
      tags: [ kit ]
      operationId: getKitRequests
      parameters:
        - *portalShortcodeParam
        - *studyShortcodeParam
        - *envNameParam
        - *enrolleeShortcodeParam
      responses:
        '200':
          description: Kit requests
          content: *jsonContent
        '500':
          $ref: '#/components/responses/ServerError'
  /api/portals/v1/{portalShortcode}/studies/{studyShortcode}/env/{envName}/enrollees/{enrolleeShortcode}/requestKit:
    post:
      summary: Request a sample kit for an enrollee
      tags: [ kit ]
      operationId: requestKit
      parameters:
        - *portalShortcodeParam
        - *studyShortcodeParam
        - *envNameParam
        - *enrolleeShortcodeParam
      requestBody:
        required: true
        description: kit request creation dto
        content: *jsonContent
      responses:
        '200':
          description: Kit request
          content: *jsonContent
        '500':
          $ref: '#/components/responses/ServerError'
  /api/portals/v1/{portalShortcode}/studies/{studyShortcode}/env/{envName}/enrollees/{enrolleeShortcode}/collectKit:
    post:
      summary: Collects a sample kit from an enrollee and updates the kit status
      tags: [ kit ]
      operationId: collectKit
      parameters:
        - *portalShortcodeParam
        - *studyShortcodeParam
        - *envNameParam
        - *enrolleeShortcodeParam
      requestBody:
        required: true
        description: kit request creation dto
        content: *jsonContent
      responses:
        '200':
          description: Kit request
          content: *jsonContent
        '500':
          $ref: '#/components/responses/ServerError'
  /api/portals/v1/{portalShortcode}/studies/{studyShortcode}/env/{envName}/enrollees/{enrolleeShortcode}/participantNote:
    post:
      summary: Create a participant note
      tags: [ participantNote ]
      operationId: create
      parameters:
        - *portalShortcodeParam
        - *studyShortcodeParam
        - *envNameParam
        - *enrolleeShortcodeParam
      requestBody:
        required: true
        content: *jsonContent
      responses:
        '200':
          description: Participant note
          content: *jsonContent
        '500':
          $ref: '#/components/responses/ServerError'
  /api/portals/v1/{portalShortcode}/studies/{studyShortcode}/env/{envName}/families:
    get:
      summary: Gets all families in a study environment
      tags: [ family ]
      operationId: findAll
      parameters:
        - *portalShortcodeParam
        - *studyShortcodeParam
        - *envNameParam
      responses:
        '200':
          description: List of families
          content: *jsonContent
        '500':
          $ref: '#/components/responses/ServerError'
    post:
      summary: Creates a new family
      tags: [ family ]
      operationId: create
      parameters:
        - { name: portalShortcode, in: path, required: true, schema: { type: string } }
        - { name: studyShortcode, in: path, required: true, schema: { type: string } }
        - { name: envName, in: path, required: true, schema: { type: string } }
        - { name: justification, in: query, required: true, schema: { type: string } }
      requestBody:
        required: true
        content: { application/json: { schema: { type: object } } }
      responses:
        '200':
          description: New family object
          content: { application/json: { schema: { type: object } } }
        '500':
          $ref: '#/components/responses/ServerError'
  /api/portals/v1/{portalShortcode}/studies/{studyShortcode}/env/{envName}/enrollee/populate:
    post:
      summary: Populates an Enrollee to a given portal/study/env.
      tags: [ populate ]
      operationId: populateEnrollee
      parameters:
        - *portalShortcodeParam
        - *studyShortcodeParam
        - *envNameParam
        - { name: filePathName, in: query, required: false, schema: { type: string } }
        - { name: popType, in: query, required: false, schema: { type: string } }
        - { name: username, in: query, required: false, schema: { type: string } }
        - { name: overwrite, in: query, required: false, schema: { type: boolean } }
      responses:
        '201':
          description: enrollee object
          content:
            application/json:
              schema:
                type: object
  /api/portals/v1/{portalShortcode}/studies/{studyShortcode}/env/{envName}/families/{familyShortcodeOrId}:
    get:
      summary: Finds a family by shortcode or id
      tags: [ family ]
      operationId: find
      parameters:
        - *portalShortcodeParam
        - *studyShortcodeParam
        - *envNameParam
        - { name: familyShortcodeOrId, in: path, required: true, schema: { type: string } }
      responses:
        '200':
          description: Family object
          content: *jsonContent
        '500':
          $ref: '#/components/responses/ServerError'
    delete:
      summary: Deletes a family
      tags: [ family ]
      operationId: delete
      parameters:
        - *portalShortcodeParam
        - *studyShortcodeParam
        - *envNameParam
        - { name: familyShortcodeOrId, in: path, required: true, schema: { type: string } }
        - { name: justification, in: query, required: true, schema: { type: string } }
      responses:
        '200':
          description: New family object
          content: { application/json: { schema: { type: object } } }
        '500':
          $ref: '#/components/responses/ServerError'
  /api/portals/v1/{portalShortcode}/studies/{studyShortcode}/env/{envName}/families/{familyShortcode}/proband/{enrolleeShortcode}:
    patch:
      summary: Updates the family's proband
      tags: [ family ]
      operationId: updateProband
      parameters:
        - *portalShortcodeParam
        - *studyShortcodeParam
        - *envNameParam
        - { name: familyShortcode, in: path, required: true, schema: { type: string } }
        - *enrolleeShortcodeParam
        - { name: justification, in: query, required: true, schema: { type: string } }
      responses:
        '200':
          content: *jsonContent
          description: Successfully updated proband
        '500':
          $ref: '#/components/responses/ServerError'
  /api/portals/v1/{portalShortcode}/studies/{studyShortcode}/env/{envName}/families/{familyShortcode}/members/{enrolleeShortcode}:
    put:
      summary: Adds a new member to the family
      tags: [ family ]
      operationId: addEnrollee
      parameters:
        - *portalShortcodeParam
        - *studyShortcodeParam
        - *envNameParam
        - { name: familyShortcode, in: path, required: true, schema: { type: string } }
        - *enrolleeShortcodeParam
        - { name: justification, in: query, required: true, schema: { type: string } }
      responses:
        '200':
          description: Successful addition
        '500':
          $ref: '#/components/responses/ServerError'
    delete:
      summary: Removes enrollee from the family
      tags: [ family ]
      operationId: removeEnrollee
      parameters:
        - *portalShortcodeParam
        - *studyShortcodeParam
        - *envNameParam
        - { name: familyShortcode, in: path, required: true, schema: { type: string } }
        - *enrolleeShortcodeParam
        - { name: justification, in: query, required: true, schema: { type: string } }
      responses:
        '200':
          description: Successful deletion
        '500':
          $ref: '#/components/responses/ServerError'
  /api/portals/v1/{portalShortcode}/studies/{studyShortcode}/env/{envName}/families/{familyShortcode}/changeRecords:
    get:
      summary: List of data change records for a family
      tags: [ family ]
      operationId: listChangeRecords
      parameters:
        - *portalShortcodeParam
        - *studyShortcodeParam
        - *envNameParam
        - { name: familyShortcode, in: path, required: true, schema: { type: string } }
        - { name: modelName, in: query, required: false, schema: { type: string } }
      responses:
        '200':
          description: List of DataChangeRecords
          content: *jsonContent
        '500':
          $ref: '#/components/responses/ServerError'
  /api/portals/v1/{portalShortcode}/studies/{studyShortcode}/env/{envName}/triggers:
    get:
      summary: gets all the active triggered actions for the environment
      tags: [ trigger ]
      operationId: findByStudy
      parameters:
        - *portalShortcodeParam
        - *studyShortcodeParam
        - *envNameParam
      responses:
        '200':
          description: The triggered actions
          content: *jsonContent
        '500':
          $ref: '#/components/responses/ServerError'
    post:
      summary: create a new triggered action for the environment
      tags: [ trigger ]
      operationId: create
      parameters:
        - *portalShortcodeParam
        - *studyShortcodeParam
        - *envNameParam
      requestBody:
        required: true
        content: *jsonContent
      responses:
        '200':
          description: The notification config
          content: *jsonContent
        '500':
          $ref: '#/components/responses/ServerError'
  /api/portals/v1/{portalShortcode}/studies/{studyShortcode}/env/{envName}/triggers/{configId}:
    get:
      summary: gets the trigger by id
      tags: [ trigger ]
      operationId: get
      parameters:
        - *portalShortcodeParam
        - *studyShortcodeParam
        - *envNameParam
        - { name: configId, in: path, required: true, schema: { type: string, format: uuid } }
      responses:
        '200':
          description: The trigger
          content: *jsonContent
        '500':
          $ref: '#/components/responses/ServerError'
    delete:
      summary: deactivates the trigger by id
      tags: [ trigger ]
      operationId: delete
      parameters:
        - *portalShortcodeParam
        - *studyShortcodeParam
        - *envNameParam
        - { name: configId, in: path, required: true, schema: { type: string, format: uuid } }
      responses:
        '200':
          description: Successful deletion
        '500':
          $ref: '#/components/responses/ServerError'
    patch:
      summary: Since triggers are immutable, a new config is made and the current one is deactivated.  The new trigger is attached to the study and is returned
      tags: [ trigger ]
      operationId: replace
      parameters:
        - *portalShortcodeParam
        - *studyShortcodeParam
        - *envNameParam
        - { name: configId, in: path, required: true, schema: { type: string, format: uuid } }
      requestBody:
        required: true
        content: *jsonContent
      responses:
        '200':
          description: The new trigger
          content: *jsonContent
        '500':
          $ref: '#/components/responses/ServerError'
  /api/portals/v1/{portalShortcode}/studies/{studyShortcode}/env/{envName}/notifications/adhoc:
    post:
      summary: Send a one-off notification/message to one or more enrollees with a specified trigger
      tags: [ trigger ]
      operationId: adHoc
      parameters:
        - *portalShortcodeParam
        - *studyShortcodeParam
        - *envNameParam
      requestBody:
        required: true
        content: *jsonContent
      responses:
        '200':
          description: The trigger created/used for the notification
          content: *jsonContent
        '500':
          $ref: '#/components/responses/ServerError'
  /api/portals/v1/{portalShortcode}/studies/{studyShortcode}/env/{envName}/triggers/{configId}/test:
    post:
      summary: Sends a test action for the given trigger and enrolleeRuleData
      tags: [ trigger ]
      operationId: test
      parameters:
        - *portalShortcodeParam
        - *studyShortcodeParam
        - *envNameParam
        - { name: configId, in: path, required: true, schema: { type: string, format: uuid } }
      requestBody:
        required: true
        content: *jsonContent
      responses:
        '200':
          description: List of notifications
          content: *jsonContent
        '500':
          $ref: '#/components/responses/ServerError'
  /api/portals/v1/{portalShortcode}/studies/{studyShortcode}/env/{envName}/export/data:
    get:
      summary: Gets the export data in the specified format
      tags: [ export ]
      operationId: exportData
      parameters:
        - *portalShortcodeParam
        - *studyShortcodeParam
        - *envNameParam
        - { name: splitOptionsIntoColumns, in: query, required: false, schema: { type: boolean, default: false } }
        - { name: stableIdsForOptions, in: query, required: false, schema: { type: boolean, default: false } }
        - { name: onlyIncludeMostRecent, in: query, required: false, schema: { type: boolean, default: true } }
        - { name: includeSubheaders, in: query, required: false, schema: { type: boolean, default: true } }
        - { name: excludeModules, in: query, required: false, schema: { type: array, items: { type: string } } }
        - { name: filter, in: query, required: false, schema: { type: string, default: '' } }
        - { name: fileFormat, in: query, required: false, schema: { type: string, default: "TSV" } }
        - { name: rowLimit, in: query, required: false, schema: { type: integer } }
      responses:
        '200':
          description: export data
          content: { text/plain: { schema: { type: string, format: binary } } }
        '500':
          $ref: '#/components/responses/ServerError'
  /api/portals/v1/{portalShortcode}/studies/{studyShortcode}/env/{envName}/export/dictionary:
    get:
      summary: Gets the export data dictionary
      tags: [ export ]
      operationId: exportDictionary
      parameters:
        - *portalShortcodeParam
        - *studyShortcodeParam
        - *envNameParam
        - { name: splitOptionsIntoColumns, in: query, required: false, schema: { type: boolean, default: false } }
        - { name: stableIdsForOptions, in: query, required: false, schema: { type: boolean, default: false } }
        - { name: onlyIncludeMostRecent, in: query, required: false, schema: { type: boolean, default: true } }
        - { name: filter, in: query, required: false, schema: { type: string, default: '' } }
        - { name: fileFormat, in: query, required: false, schema: { type: string, default: "TSV" } }
      responses:
        '200':
          description: export data
          content: { text/plain: { schema: { type: string, format: binary } } }
        '500':
          $ref: '#/components/responses/ServerError'
  /api/portals/v1/{portalShortcode}/studies/{studyShortcode}/env/{envName}/exportIntegrations:
    get:
      summary: gets all the active exportIntegrations for the environment
      tags: [ exportIntegration ]
      operationId: findByStudy
      parameters:
        - *portalShortcodeParam
        - *studyShortcodeParam
        - *envNameParam
      responses:
        '200':
          description: The exportIntegrations
          content: *jsonContent
        '500':
          $ref: '#/components/responses/ServerError'
    post:
      summary: create a new exportIntegration for the environment
      tags: [ exportIntegration ]
      operationId: create
      parameters:
        - *portalShortcodeParam
        - *studyShortcodeParam
        - *envNameParam
      requestBody:
        required: true
        content: *jsonContent
      responses:
        '200':
          description: The exportIntegration
          content: *jsonContent
        '500':
          $ref: '#/components/responses/ServerError'
  /api/portals/v1/{portalShortcode}/studies/{studyShortcode}/env/{envName}/exportIntegrations/{id}:
    get:
      summary: gets the exportIntegration by id
      tags: [ exportIntegration ]
      operationId: get
      parameters:
        - *portalShortcodeParam
        - *studyShortcodeParam
        - *envNameParam
        - { name: id, in: path, required: true, schema: { type: string, format: uuid } }
      responses:
        '200':
          description: The exportIntegration
          content: *jsonContent
        '500':
          $ref: '#/components/responses/ServerError'
  /api/portals/v1/{portalShortcode}/studies/{studyShortcode}/env/{envName}/exportIntegrations/{id}/run:
    post:
      summary: runs the exportIntegration by id
      tags: [ exportIntegration ]
      operationId: run
      parameters:
        - *portalShortcodeParam
        - *studyShortcodeParam
        - *envNameParam
        - { name: id, in: path, required: true, schema: { type: string, format: uuid } }
      responses:
        '200':
          description: The exportIntegration result
          content: *jsonContent
        '500':
          $ref: '#/components/responses/ServerError'
  /api/portals/v1/{portalShortcode}/studies/{studyShortcode}/env/{envName}/exportIntegrationJobs:
    get:
      summary: gets all the exportIntegrationJobs for the environment
      tags: [ exportIntegration ]
      operationId: findJobsByStudy
      parameters:
        - *portalShortcodeParam
        - *studyShortcodeParam
        - *envNameParam
      responses:
        '200':
          description: The exportIntegrationJobs
          content: *jsonContent
        '500':
          $ref: '#/components/responses/ServerError'
  /api/portals/v1/{portalShortcode}/env/{envName}/mailingList:
    post:
      summary: Adds a list of contacts to the mailing list for the environment
      tags: [ mailingList ]
      operationId: create
      parameters:
        - *portalShortcodeParam
        - *envNameParam
      requestBody:
        description: list of contacts
        required: true
        content: *jsonContent
      responses:
        '200':
          description: list of created contacts
          content: *jsonContent
        '500':
          $ref: '#/components/responses/ServerError'
    get:
      summary: Gets the mailing list for the environment
      tags: [ mailingList ]
      operationId: get
      parameters:
        - *portalShortcodeParam
        - *envNameParam
      responses:
        '200':
          description: List of mailing list contacts
          content: *jsonContent
        '500':
          $ref: '#/components/responses/ServerError'
  /api/portals/v1/{portalShortcode}/env/{envName}/mailingList/{contactId}:
    delete:
      summary: Removes an entry from the mailing list
      tags: [ mailingList ]
      operationId: delete
      parameters:
        - *portalShortcodeParam
        - *envNameParam
        - { name: contactId, in: path, required: true, schema: { type: string, format: uuid } }
      responses:
        '204':
          description: indication of successful deletion
        '500':
          $ref: '#/components/responses/ServerError'
  /api/address/v1/validate:
    put:
      summary: Validate a given address
      tags: [ addressValidation ]
      operationId: validate
      requestBody:
        description: mailing address
        required: true
        content: *jsonContent
      responses:
        '200':
          description: validation results
          content: *jsonContent
        '500':
          $ref: '#/components/responses/ServerError'
  /api/current-user/v1/unauthed/login:
    post:
      summary: Unauthenticated login (dev only)
      tags: [ currentUnauthedUser ]
      operationId: unauthedLogin
      parameters:
        - { name: username, in: query, required: true, schema: { type: string } }
      responses:
        '200':
          description: portal object
          content: *jsonContent
        '500':
          $ref: '#/components/responses/ServerError'
  /api/current-user/v1/unauthed/refresh:
    post:
      summary: Token refresh
      tags: [ currentUnauthedUser ]
      operationId: refresh
      requestBody:
        required: true
        content: { application/json: { schema: { $ref: '#/components/schemas/TokenLoginInfo' } } }
      responses:
        '200':
          description: user object
          content: { application/json: { schema: {
            type: object
          } } }
        '500':
          $ref: '#/components/responses/ServerError'
  /api/current-user/v1/login:
    post:
      summary: Token login
      tags: [ currentUser ]
      operationId: login
      requestBody:
        required: true
        content: { application/json: { schema: { $ref: '#/components/schemas/TokenLoginInfo' } } }
      responses:
        '200':
          description: user object
          content: { application/json: { schema: {
            type: object
          } } }
        '500':
          $ref: '#/components/responses/ServerError'
  /api/current-user/v1/refresh:
    post:
      summary: Token refresh
      tags: [ currentUser ]
      operationId: refresh
      requestBody:
        required: true
        content: { application/json: { schema: { $ref: '#/components/schemas/TokenLoginInfo' } } }
      responses:
        '200':
          description: user object
          content: { application/json: { schema: {
            type: object
          } } }
        '500':
          $ref: '#/components/responses/ServerError'
  /api/adminUsers/v1:
    get:
      summary: Gets all admin users
      tags: [ admin_user ]
      operationId: getAll
      responses:
        '200':
          description: List of admin users with portals and roles attached
          content: *jsonContent
        '500':
          $ref: '#/components/responses/ServerError'
    post:
      summary: Creates a new admin user
      tags: [ admin_user ]
      operationId: create
      requestBody:
        required: true
        content: *jsonContent
      responses:
        '200':
          description: the new user
          content: *jsonContent
        '500':
          $ref: '#/components/responses/ServerError'
  /api/adminUsers/v1/{id}:
    get:
      summary: Gets an admin user
      tags: [ admin_user ]
      operationId: get
      parameters:
        - { name: id, in: path, required: true, schema: { type: string, format: uuid } }
        - { name: portalShortcode, in: query, required: false, schema: { type: string } }
      responses:
        '200':
          description: admin user object with associated roles
          content: *jsonContent
        '404':
          description: admin user not found
        '500':
          $ref: '#/components/responses/ServerError'
    delete:
      summary: Remove an admin user and all associated portal users
      tags: [ admin_user ]
      operationId: delete
      parameters:
        - { name: id, in: path, required: true, schema: { type: string, format: uuid } }
      responses:
        '204':
          description: admin user removed
        '404':
          description: admin user not found
        '500':
          $ref: '#/components/responses/ServerError'
  /api/roles/v1:
    get:
      summary: Gets the list of roles
      tags: [ roles ]
      operationId: list
      responses:
        '200':
          description: list of available roles
          content: *jsonContent
        '404':
          description: admin user not found
        '500':
          $ref: '#/components/responses/ServerError'
  /api/portals/v1/{portalShortcode}/adminUsers:
    get:
      summary: Gets the admin users specific to this portal
      tags: [ adminUser ]
      operationId: getByPortal
      parameters:
        - *portalShortcodeParam
      responses:
        '200':
          description: List of admin users
          content: *jsonContent
        '500':
          $ref: '#/components/responses/ServerError'
    post:
      summary: Creates a new admin user within a portal
      tags: [ admin_user ]
      operationId: createInPortal
      parameters:
        - *portalShortcodeParam
      requestBody:
        required: true
        content: *jsonContent
      responses:
        '200':
          description: the new user
          content: *jsonContent
        '500':
          $ref: '#/components/responses/ServerError'

  /api/portals/v1/{portalShortcode}/adminUsers/{adminUserId}:
    patch:
      summary: Update roles for a portal admin user
      tags: [ admin_user ]
      operationId: setRolesInPortal
      parameters:
        - *portalShortcodeParam
        - { name: adminUserId, in: path, required: true, schema: { type: string, format: uuid } }
      requestBody:
        required: true
        content: *jsonContent
      responses:
        '200':
          description: list of roles updated
          content: *jsonContent
        '404':
          description: admin user not found
        '500':
          $ref: '#/components/responses/ServerError'
    delete:
      summary: Remove an admin user for portal
      tags: [ admin_user ]
      operationId: deleteInPortal
      parameters:
        - *portalShortcodeParam
        - { name: adminUserId, in: path, required: true, schema: { type: string, format: uuid } }
      responses:
        '204':
          description: admin user removed
        '404':
          description: admin user not found
        '500':
          $ref: '#/components/responses/ServerError'
  /api/portals/v1/{portalShortcode}/env/{envName}:
    patch:
      summary: Updates an environment (shallow), such as to change site content.
      tags: [ portalEnvironment ]
      operationId: update
      parameters:
        - *portalShortcodeParam
        - *envNameParam
      requestBody:
        required: true
        content: *jsonContent
      responses:
        '200':
          description: PortalEnvironmentChangeRecord object
          content: *jsonContent
        '500':
          $ref: '#/components/responses/ServerError'
  /api/portals/v1/{portalShortcode}/env/{envName}/portalLanguages:
    post:
      summary: Updates an environments list of supported languages.
      tags: [ portalEnvironment ]
      operationId: setLanguages
      parameters:
        - *portalShortcodeParam
        - *envNameParam
      requestBody:
        required: true
        content: *jsonContent
      responses:
        '200':
          description: List of PortalLanguages
          content: *jsonContent
        '500':
          $ref: '#/components/responses/ServerError'
  /api/portals/v1/{portalShortcode}/env/{envName}/dashboard/config/alerts:
    get:
      summary: Lists all participant dashboard alert configs for a portal environment
      tags: [ dashboard ]
      operationId: listPortalEnvAlerts
      parameters:
        - *portalShortcodeParam
        - *envNameParam
      responses:
        '200':
          description: OK
          content: *jsonContent
        '500':
          $ref: '#/components/responses/ServerError'
  /api/portals/v1/{portalShortcode}/env/{envName}/dashboard/config/alerts/{triggerName}:
    post:
      summary: Creates a participant dashboard alert config for a portal environment
      tags: [ dashboard ]
      operationId: createPortalEnvAlert
      parameters:
        - *portalShortcodeParam
        - *envNameParam
        - { name: triggerName, in: path, required: true, schema: { type: string } }
      requestBody:
        required: true
        content: *jsonContent
      responses:
        '200':
          description: OK
          content: *jsonContent
        '500':
          $ref: '#/components/responses/ServerError'
    patch:
      summary: Updates a participant dashboard alert config for a portal environment
      tags: [ dashboard ]
      operationId: updatePortalEnvAlert
      parameters:
        - *portalShortcodeParam
        - *envNameParam
        - { name: triggerName, in: path, required: true, schema: { type: string } }
      requestBody:
        required: true
        content: *jsonContent
      responses:
        '200':
          description: OK
          content: *jsonContent
        '500':
          $ref: '#/components/responses/ServerError'
  /api/portals/v1/{portalShortcode}/publish/diff/{sourceEnv}/{targetEnv}:
    get:
      summary: Gets the diff between one environment and another
      tags: [ portalPublishing ]
      operationId: diff
      parameters:
        - *portalShortcodeParam
        - { name: sourceEnv, in: path, required: true, schema: { type: string } }
        - { name: targetEnv, in: path, required: true, schema: { type: string } }
      responses:
        '200':
          description: PortalEnvironmentChangeRecord object
          content: *jsonContent
        '500':
          $ref: '#/components/responses/ServerError'
  /api/portals/v1/{portalShortcode}/publish/apply/{envName}:
    post:
      summary: Updates a portal environment according to the update object obtained from a diff operation
      tags: [ portalPublishing ]
      operationId: publish
      parameters:
        - *portalShortcodeParam
        - { name: envName, in: path, required: true, schema: { type: string } }
      requestBody:
        required: false
        content: *jsonContent
      responses:
        '200':
          description: PortalEnvironment object
          content: *jsonContent
        '500':
          $ref: '#/components/responses/ServerError'
  /api/portals/v1/{portalShortcode}/publish/changeRecords:
    get:
      summary: Gets the change records for a portal environment
      tags: [ portalPublishing ]
      operationId: getChangeRecords
      parameters:
        - *portalShortcodeParam
      responses:
        '200':
          description: List of PortalEnvironmentChangeRecords
          content: *jsonContent
        '500':
          $ref: '#/components/responses/ServerError'
  /api/portals/v1/{portalShortcode}/env/{envName}/config:
    patch:
      summary: Updates a portal environment config according to the update object
      tags: [ portalEnvironmentConfig ]
      operationId: update
      parameters:
        - *portalShortcodeParam
        - *envNameParam
      requestBody:
        required: true
        content: *jsonContent
      responses:
        '200':
          description: PortalEnvironmentConfig object
          content: *jsonContent
        '500':
          $ref: '#/components/responses/ServerError'
  /api/internal/v1/config:
    get:
      summary: Lists non-sensitive config values
      tags: [ config ]
      operationId: get
      responses:
        '200':
          description: config object
          content:
            application/json:
              schema:
                type: object
        '500':
          $ref: '#/components/responses/ServerError'
  /api/internal/v1/populate/baseSeed:
    post:
      summary: Populates
      tags: [ populate ]
      operationId: populateBaseSeed
      responses:
        '201':
          description: stats object
          content:
            application/json:
              schema:
                type: object
        '500':
          $ref: '#/components/responses/ServerError'
  /api/internal/v1/populate/adminConfig:
    post:
      summary: Populates admin config
      tags: [ populate ]
      operationId: populateAdminConfig
      parameters:
        - { name: overwrite, in: query, required: false, schema: { type: boolean } }
      responses:
        '201':
          description: summary stats for the operation
          content:
            application/json:
              schema:
                type: object
        '500':
          $ref: '#/components/responses/ServerError'
  /api/internal/v1/populate/portal:
    post:
      summary: Populates a portal from a flat file that is already on the server
      tags: [ populate ]
      operationId: populatePortal
      parameters:
        - { name: filePathName, in: query, required: true, schema: { type: string } }
        - { name: overwrite, in: query, required: false, schema: { type: boolean } }
        - { name: shortcodeOverride, in: query, required: false, schema: { type: string } }
      responses:
        '201':
          description: portal object
          content:
            application/json:
              schema:
                type: object
        '500':
          $ref: '#/components/responses/ServerError'
  /api/internal/v1/populate/portal/upload:
    post:
      summary: upload a zip file of a portal (typically generated from the extract endpoint)
      tags: [ populate ]
      operationId: uploadPortal
      parameters:
        - { name: overwrite, in: query, required: false, schema: { type: boolean } }
        - { name: shortcodeOverride, in: query, required: false, schema: { type: string } }
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                image:
                  type: string
                  format: binary
      responses:
        '200':
          description: portal object (abbreviated)
          content: *jsonContent
        '500':
          $ref: '#/components/responses/ServerError'
  /api/internal/v1/populate/portal/{portalShortcode}/extract:
    get:
      summary: Extract portal configs as a zip file
      tags: [ populate ]
      operationId: extractPortal
      parameters:
        - *portalShortcodeParam
      responses:
        '200':
          description: zip file of portal configs
          content: { text/plain: { schema: { type: string, format: binary } } }
        '500':
          $ref: '#/components/responses/ServerError'
  /api/internal/v1/populate/siteContent/{portalShortcode}:
    post:
      summary: Populates a siteContent to a given portal
      tags: [ populate ]
      operationId: populateSiteContent
      parameters:
        - *portalShortcodeParam
        - { name: filePathName, in: query, required: true, schema: { type: string } }
        - { name: overwrite, in: query, required: false, schema: { type: boolean } }
      responses:
        '201':
          description: siteContent object
          content:
            application/json:
              schema:
                type: object
        '500':
          $ref: '#/components/responses/ServerError'
  /api/internal/v1/populate/survey/{portalShortcode}:
    post:
      summary: Populates a survey to a given portal
      tags: [ populate ]
      operationId: populateSurvey
      parameters:
        - *portalShortcodeParam
        - { name: filePathName, in: query, required: true, schema: { type: string } }
        - { name: overwrite, in: query, required: false, schema: { type: boolean } }
      responses:
        '201':
          description: survey object
          content:
            application/json:
              schema:
                type: object
        '500':
          $ref: '#/components/responses/ServerError'
  /api/internal/v1/populate/enrollee/{portalShortcode}/env/{envName}/study/{studyShortcode}/bulk:
    post:
      summary: Bulk populates enrollees in a given portal/study/env.
      tags: [ populate ]
      operationId: bulkPopulateEnrollees
      parameters:
        - *portalShortcodeParam
        - *envNameParam
        - *studyShortcodeParam
        - { name: numEnrollees, in: query, required: true, schema: { type: integer } }
      responses:
        '204':
          description: No Content
        '500':
          $ref: '#/components/responses/ServerError'
  /api/internal/v1/populate/command/{command}:
    post:
      summary: Runs a specified populate command
      tags: [ populate ]
      operationId: populateCommand
      parameters:
        - { name: command, in: path, required: true, schema: { type: string } }
      requestBody:
        required: false
        content: *jsonContent
      responses:
        '201':
          description: command result object
          content:
            application/json:
              schema:
                type: object
        '500':
          $ref: '#/components/responses/ServerError'
  /api/portals/v1/{portalShortcode}/studies/{studyShortcode}/env/{envName}/datarepo/datasets:
    get:
      summary: Gets the list of datasets for the study environment
      tags: [ datarepo ]
      operationId: listDatasetsForStudyEnvironment
      parameters:
        - *portalShortcodeParam
        - *studyShortcodeParam
        - *envNameParam
      responses:
        '200':
          description: dataset
          content: *jsonContent
        '500':
          $ref: '#/components/responses/ServerError'
    post:
      summary: Creates a new TDR dataset for the study environment
      tags: [ datarepo ]
      operationId: createDatasetForStudyEnvironment
      parameters:
        - *portalShortcodeParam
        - *studyShortcodeParam
        - *envNameParam
      requestBody:
        required: true
        content: { application/json: { schema: { $ref: '#/components/schemas/CreateDataset' } } }
      responses:
        '202':
          description: Accepted
        '500':
          $ref: '#/components/responses/ServerError'
  /api/portals/v1/{portalShortcode}/studies/{studyShortcode}/env/{envName}/datarepo/datasets/{datasetName}:
    delete:
      summary: Deletes the specified TDR dataset
      tags: [ datarepo ]
      operationId: deleteDataset
      parameters:
        - *portalShortcodeParam
        - *studyShortcodeParam
        - *envNameParam
        - { name: datasetName, in: path, required: true, schema: { type: string } }
      responses:
        '202':
          description: Accepted
        '500':
          $ref: '#/components/responses/ServerError'
  /api/portals/v1/{portalShortcode}/studies/{studyShortcode}/env/{envName}/datarepo/datasets/{datasetName}/jobs:
    get:
      summary: Gets the job history for a study environment TDR dataset
      tags: [ datarepo ]
      operationId: getJobHistoryForDataset
      parameters:
        - *portalShortcodeParam
        - *studyShortcodeParam
        - *envNameParam
        - { name: datasetName, in: path, required: true, schema: { type: string } }
      responses:
        '200':
          description: dataset job history
          content: *jsonContent
        '500':
          $ref: '#/components/responses/ServerError'
  /api/portals/v1/{portalShortcode}/siteMedia:
    get:
      summary: Returns a list of the metadata for the images in the portal -- does not return the image files themselves
      tags: [ siteMedia ]
      operationId: list
      parameters:
        - *portalShortcodeParam
      responses:
        '200':
          description: image data
          content: *jsonContent
        '500':
          $ref: '#/components/responses/ServerError'
  /api/portals/v1/{portalShortcode}/siteMedia/{id}:
    delete:
      summary: Deletes the site media by id
      tags: [ siteMedia ]
      operationId: delete
      parameters:
        - *portalShortcodeParam
        - { name: id, in: path, required: true, schema: { type: string, format: uuid } }
      responses:
        '200':
          description: successful deletion
        '500':
          $ref: '#/components/responses/ServerError'
  /api/portals/v1/{portalShortcode}/siteMedia/upload/{uploadFileName}/{version}:
    post:
      summary: upload an image
      tags: [ siteMedia ]
      operationId: upload
      parameters:
        - *portalShortcodeParam
        - { name: uploadFileName, in: path, required: true, schema: { type: string } }
        - *versionParam
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                image:
                  type: string
                  format: binary
      responses:
        '200':
          description: image data
          content: *jsonContent
        '500':
          $ref: '#/components/responses/ServerError'
  /api/public/portals/v1/{portalShortcode}/env/{envName}/siteMedia/{version}/{cleanFileName}:
    get:
      summary: Returns the binary image data for the image of the given shortcode
      tags: [ siteMedia ]
      operationId: get
      parameters:
        - *portalShortcodeParam
        - *envNameParam
        - { name: cleanFileName, in: path, required: true, schema: { type: string } }
        - { name: version, in: path, required: true, schema: { type: string } }
      responses:
        '200':
          description: image data. Note that "version" supports both integers and the string 'latest' to get the most recent
          content:
            image/*: # see https://superuser.com/questions/979135/is-there-a-generic-mime-type-for-all-image-files
              schema:
                type: string
                format: binary
        '500':
          $ref: '#/components/responses/ServerError'
  /api/portals/v1/{portalShortcode}/studies/{studyShortcode}/env/{envName}/enrolleesWithKits:
    get:
      summary: Gets a list of enrollees with tasks and kit requests
      tags: [ enrollee ]
      operationId: enrolleesWithKits
      parameters:
        - *portalShortcodeParam
        - *studyShortcodeParam
        - *envNameParam
      responses:
        '200':
          description: enrollee list
          content: *jsonContent
        '500':
          $ref: '#/components/responses/ServerError'
  /api/portals/v1/{portalShortcode}/studies/{studyShortcode}/env/{envName}/kits:
    get:
      summary: Gets a list of kits for a study
      tags: [ kit ]
      operationId: kitsByStudyEnvironment
      parameters:
        - *portalShortcodeParam
        - *studyShortcodeParam
        - *envNameParam
      responses:
        '200':
          description: kit list
          content: *jsonContent
        '500':
          $ref: '#/components/responses/ServerError'
  /api/portals/v1/{portalShortcode}/studies/{studyShortcode}/env/{envName}/kits/refreshKitStatuses:
    post:
      summary: Fetch kit statuses from Pepper and cache in the Juniper database
      tags: [ kit ]
      operationId: refreshKitStatuses
      parameters:
        - *portalShortcodeParam
        - *studyShortcodeParam
        - *envNameParam
      responses:
        '204':
          description: Success
        '500':
          $ref: '#/components/responses/ServerError'

  /api/portals/v1/{portalShortcode}/studies/{studyShortcode}/env/{envName}/dataImport:
    get:
      summary: Gets a list of imports for a study
      tags: [ dataImport ]
      operationId: getAll
      parameters:
        - *portalShortcodeParam
        - *studyShortcodeParam
        - *envNameParam
      responses:
        '200':
          description: import list
          content: *jsonContent
        '500':
          $ref: '#/components/responses/ServerError'

    post:
      summary: imports participant data files
      tags: [ dataImport ]
      operationId: importData
      parameters:
        - *portalShortcodeParam
        - *studyShortcodeParam
        - *envNameParam
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                importFile:
                  type: string
                  format: binary
      responses:
        '200':
          description: saved import data
          content: *jsonContent
        '500':
          $ref: '#/components/responses/ServerError'

  /api/portals/v1/{portalShortcode}/studies/{studyShortcode}/env/{envName}/dataImport/{importId}:
    get:
      summary: Get the import
      tags: [ dataImport ]
      operationId: get
      parameters:
        - *portalShortcodeParam
        - *studyShortcodeParam
        - *envNameParam
        - { name: importId, in: path, required: true, schema: { type: string, format: uuid } }
      responses:
        '200':
          description: import
          content: *jsonContent
        '500':
          $ref: '#/components/responses/ServerError'

    delete:
      summary: delete imports for a study
      tags: [ dataImport ]
      operationId: delete
      parameters:
        - *portalShortcodeParam
        - *studyShortcodeParam
        - *envNameParam
        - { name: importId, in: path, required: true, schema: { type: string, format: uuid } }
      responses:
        '200':
          description: successful deletion
        '500':
          $ref: '#/components/responses/ServerError'

  /api/portals/v1/{portalShortcode}/studies/{studyShortcode}/env/{envName}/dataImport/{importId}/{importItemId}:

    delete:
      summary: delete import item for a study
      tags: [ dataImport ]
      operationId: deleteItem
      parameters:
        - *portalShortcodeParam
        - *studyShortcodeParam
        - *envNameParam
        - { name: importId, in: path, required: true, schema: { type: string, format: uuid } }
        - { name: importItemId, in: path, required: true, schema: { type: string, format: uuid } }
      responses:
        '200':
          description: successful deletion
        '500':
          $ref: '#/components/responses/ServerError'

  /api/logEvents:
    get:
      summary: Get log events. Filterable by event type and number of days.
      tags: [ logging ]
      operationId: get
      parameters:
        - { name: eventTypes, in: query, required: false, schema: { type: string } }
        - { name: days, in: query, required: true, schema: { type: string } }
        - { name: limit, in: query, required: false, schema: { type: integer, default: 1000 } }
      responses:
        '200':
          description: logs
          content: { application/json: { schema: { type: object } } }
        '500':
          $ref: '#/components/responses/ServerError'
  /api/public/log/v1/track:
    post:
      summary: Tracks a user event
      tags: [ logging ]
      operationId: trackEvent
      requestBody:
        required: false
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                data:
                  type: string
                  description: The event data
          text/plain:
            schema:
              type: string
              description: The event data
      responses:
        '202':
          description: the id of the generated event
          content: { application/json: { schema: { type: string } } }
        '500':
          $ref: '#/components/responses/ServerError'
  /api/public/log/v1/engage:
    post:
      summary: Tracks a user engagement event (stub)
      tags: [ logging ]
      operationId: trackEngage
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                data:
                  type: string
                  description: The event data
      responses:
        '202':
          description: the id of the generated event
          content: { application/json: { schema: { type: string } } }
        '500':
          $ref: '#/components/responses/ServerError'
  /api/public/log/v1/groups:
    post:
      summary: Tracks user groups (stub)
      tags: [ logging ]
      operationId: trackGroups
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                data:
                  type: string
                  description: The event data
      responses:
        '202':
          description: the id of the generated event
          content: { application/json: { schema: { type: string } } }
        '500':
          $ref: '#/components/responses/ServerError'


components:
  responses:
    SystemStatusResponse:
      description: A JSON description of the subsystems and their statuses.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SystemStatus'

    # Error Responses
    BadRequest:
      description: Bad request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorReport'
    PermissionDenied:
      description: Permission denied
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorReport'
    NotFound:
      description: Not found (or unauthorized)
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorReport'
    ServerError:
      description: Server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorReport'

  schemas:
    TokenLoginInfo:
      type: object
      properties:
        token: { type: string }
    StudyEnvironmentDto:
      type: object
      properties:
        id: { type: string, format: uuid }
        preEnrollSurveyId: { type: string, format: uuid }
    ErrorReport:
      type: object
      required: [ message, statusCode ]
      properties:
        message:
          type: string
        errorClass:
          type: string
        statusCode:
          type: integer
    PortalDto:
      type: object
    CreateDataset:
      properties:
        name:
          type: string
        description:
          type: string
    SystemStatus:
      required: [ ok, systems ]
      type: object
      properties:
        ok:
          type: boolean
          description: whether any system(s) need attention
        systems:
          type: object
          additionalProperties:
            type: object
            properties:
              ok:
                type: boolean
              messages:
                type: array
                items:
                  type: string

    VersionProperties:
      type: object
      properties:
        gitTag:
          type: string
        gitHash:
          type: string
        github:
          type: string
        build:
          type: string

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer

security:
  - bearerAuth: [ ]
