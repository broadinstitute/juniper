openapi: 3.0.3
info:
  title: Pearl Admin API
  description: API for portal and study management
  version: 0.0.1
paths:
  /status:
    get:
      summary: Check status of the service
      tags: [ public ]
      operationId: getStatus
      security: [ ]
      responses:
        '200':
          $ref: '#/components/responses/SystemStatusResponse'
        '500':
          $ref: '#/components/responses/ServerError'
        '503':
          $ref: '#/components/responses/SystemStatusResponse'

  /version:
    get:
      summary: Get version info of the deployed service
      tags: [ public ]
      operationId: getVersion
      security: [ ]
      responses:
        '200':
          description: Version information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VersionProperties'
        '404':
          description: "Version not configured"
        '500':
          $ref: '#/components/responses/ServerError'

  /config:
    get:
      summary: Get configuration info for authenticating with and using the API
      tags: [ public ]
      operationId: getConfig
      security: [ ]
      responses:
        '200':
          description: Configuration information
          content: { application/json: { schema: { type: object } } }

  /api/example/v1/{resourceType}/{resourceId}/{action}:
    get:
      summary: Checks sam access
      tags: [ example ]
      operationId: getAction
      parameters:
        - name: resourceType
          in: path
          required: true
          schema:
            type: string
        - name: resourceId
          in: path
          required: true
          schema:
            type: string
        - name: action
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: action access
          content:
            application/json:
              schema:
                type: boolean
        '500':
          $ref: '#/components/responses/ServerError'
  /api/portals/v1:
    get:
      summary: Gets a list of portals for the user
      tags: [ portal ]
      operationId: getAll
      responses:
        '200':
          description: list of portal objects
          content: { application/json: { schema: {type: array, items: { $ref: '#/components/schemas/PortalShallowDto' } } } }
        '500':
          $ref: '#/components/responses/ServerError'
  /api/portals/v1/{portalShortcode}:
    get:
      summary: Gets the portal object
      tags: [ portal ]
      operationId: get
      parameters:
        - { name: portalShortcode, in: path, required: true, schema: {type: string} }
      responses:
        '200':
          description: portal object
          content: { application/json: { schema: { type: object }}}
        '500':
          $ref: '#/components/responses/ServerError'
  /api/portals/v1/{portalShortcode}/surveys/{stableId}/newVersion:
    post:
      summary: Saves the survey as a new version
      tags: [ survey ]
      operationId: newVersion
      parameters:
        - { name: portalShortcode, in: path, required: true, schema: { type: string } }
        - { name: stableId, in: path, required: true, schema: { type: string } }
      requestBody:
        required: true
        content: { application/json: { schema: {$ref: '#/components/schemas/VersionedFormDto' } } }
      responses:
        '200':
          description: saved survey object
          content: { application/json: { schema: {$ref: '#/components/schemas/VersionedFormDto' } } }
        '500':
          $ref: '#/components/responses/ServerError'
  /api/portals/v1/{portalShortcode}/studies/{studyShortcode}/env/{envName}/configuredSurveys/{configSurveyId}:
    patch:
      summary: Updates a configured survey, such as by updating to a new version of the survey
      tags: [ configuredSurvey ]
      operationId: patch
      parameters:
        - { name: portalShortcode, in: path, required: true, schema: { type: string } }
        - { name: studyShortcode, in: path, required: true, schema: { type: string } }
        - { name: envName, in: path, required: true, schema: { type: string } }
        - { name: configSurveyId, in: path, required: true, schema: { type: string, format: uuid } }
      requestBody:
        required: true
        content: { application/json: { schema: { $ref: '#/components/schemas/ConfiguredSurveyDto' } } }
      responses:
        '200':
          description: saved configuredSurvey object
          content: { application/json: { schema: { $ref: '#/components/schemas/ConfiguredSurveyDto' } } }
        '500':
          $ref: '#/components/responses/ServerError'
  /api/portals/v1/{portalShortcode}/consentForms/{stableId}/{version}/newVersion:
    post:
      summary: Saves the consentForm as a new version
      tags: [ consentForm ]
      operationId: newVersion
      parameters:
        - { name: portalShortcode, in: path, required: true, schema: { type: string } }
        - { name: stableId, in: path, required: true, schema: { type: string } }
      requestBody:
        required: true
        content: { application/json: { schema: { $ref: '#/components/schemas/VersionedFormDto' } } }
      responses:
        '200':
          description: saved survey object
          content: { application/json: { schema: { $ref: '#/components/schemas/VersionedFormDto' } } }
        '500':
          $ref: '#/components/responses/ServerError'
  /api/portals/v1/{portalShortcode}/studies/{studyShortcode}/env/{envName}/configuredConsents/{configConsentId}:
    patch:
      summary: Updates a configured consent, such as by updating to a new version of the consent
      tags: [ configuredConsent ]
      operationId: patch
      parameters:
        - { name: portalShortcode, in: path, required: true, schema: { type: string } }
        - { name: studyShortcode, in: path, required: true, schema: { type: string } }
        - { name: envName, in: path, required: true, schema: { type: string } }
        - { name: configConsentId, in: path, required: true, schema: { type: string, format: uuid } }
      requestBody:
        required: true
        content: { application/json: { schema: { $ref: '#/components/schemas/ConfiguredConsentDto' } } }
      responses:
        '200':
          description: saved configuredConsent object
          content: { application/json: { schema: { $ref: '#/components/schemas/ConfiguredConsentDto' } } }
        '500':
          $ref: '#/components/responses/ServerError'
  /api/portals/v1/{portalShortcode}/studies/{studyShortcode}/env/{envName}:
    patch:
      summary: Updates a study environment configuration
      tags: [ studyEnvironment ]
      operationId: patch
      parameters:
        - { name: portalShortcode, in: path, required: true, schema: { type: string } }
        - { name: studyShortcode, in: path, required: true, schema: { type: string } }
        - { name: envName, in: path, required: true, schema: { type: string } }
      requestBody:
        required: true
        content: { application/json: { schema: { $ref: '#/components/schemas/StudyEnvironmentDto' } } }
      responses:
        '200':
          description: saved studyEnvironment object
          content: { application/json: { schema: { $ref: '#/components/schemas/StudyEnvironmentDto' } } }
        '500':
          $ref: '#/components/responses/ServerError'
  /api/portals/v1/{portalShortcode}/studies/{studyShortcode}/env/{envName}/enrollees:
    get:
      summary: Searches for enrollees in an environment
      tags: [ enrollee ]
      operationId: search
      parameters:
        - { name: portalShortcode, in: path, required: true, schema: { type: string } }
        - { name: studyShortcode, in: path, required: true, schema: { type: string } }
        - { name: envName, in: path, required: true, schema: { type: string } }
      responses:
        '200':
          description: EnrolleeSearchResult objects
          content: { application/json: { schema: {type: object} } }
        '500':
          $ref: '#/components/responses/ServerError'
  /api/portals/v1/{portalShortcode}/studies/{studyShortcode}/env/{envName}/enrollees/{enrolleeShortcode}:
    get:
      summary: Finds an enrollee by shortcode
      tags: [ enrollee ]
      operationId: find
      parameters:
        - { name: portalShortcode, in: path, required: true, schema: { type: string } }
        - { name: studyShortcode, in: path, required: true, schema: { type: string } }
        - { name: envName, in: path, required: true, schema: { type: string } }
        - { name: enrolleeShortcode, in: path, required: true, schema: { type: string } }
      responses:
        '200':
          description: Enrollee object
          content: { application/json: { schema: { type: object } } }
        '500':
          $ref: '#/components/responses/ServerError'
  /api/portals/v1/{portalShortcode}/studies/{studyShortcode}/env/{envName}/enrollees/{enrolleeShortcode}/notifications:
    get:
      summary: List the notifications sent/pending for an enrollee
      tags: [ notifications ]
      operationId: find
      parameters:
        - { name: portalShortcode, in: path, required: true, schema: { type: string } }
        - { name: studyShortcode, in: path, required: true, schema: { type: string } }
        - { name: envName, in: path, required: true, schema: { type: string } }
        - { name: enrolleeShortcode, in: path, required: true, schema: { type: string } }
      responses:
        '200':
          description: List of notifications
          content: { application/json: { schema: { type: object } } }
        '500':
          $ref: '#/components/responses/ServerError'
  /api/portals/v1/{portalShortcode}/studies/{studyShortcode}/env/{envName}/enrollees/{enrolleeShortcode}/changeRecords:
    get:
      summary: List the notifications sent/pending for an enrollee
      tags: [ enrollee ]
      operationId: listChangeRecords
      parameters:
        - { name: portalShortcode, in: path, required: true, schema: { type: string } }
        - { name: studyShortcode, in: path, required: true, schema: { type: string } }
        - { name: envName, in: path, required: true, schema: { type: string } }
        - { name: enrolleeShortcode, in: path, required: true, schema: { type: string } }
      responses:
        '200':
          description: List of DataChangeRecords
          content: { application/json: { schema: { type: object } } }
        '500':
          $ref: '#/components/responses/ServerError'
  /api/portals/v1/{portalShortcode}/env/{envName}/notificationConfigs/{configId}/test:
    post:
      summary: Sends a test notification for the given config and enrolleeRuleData
      tags: [ notifications ]
      operationId: test
      parameters:
        - { name: portalShortcode, in: path, required: true, schema: { type: string } }
        - { name: envName, in: path, required: true, schema: { type: string } }
        - { name: configId, in: path, required: true, schema: { type: string, format: uuid } }
      requestBody:
        required: true
        content: { application/json: { schema: { type: object } } }
      responses:
        '200':
          description: List of notifications
          content: { application/json: { schema: { type: object } } }
        '500':
          $ref: '#/components/responses/ServerError'

  /api/current-user/v1/unauthed-login:
    post:
      summary: Unauthenticated login (dev only)
      tags: [ currentUser ]
      operationId: unauthedLogin
      parameters:
        - { name: username, in: query, required: true, schema: { type: string } }
      responses:
        '200':
          description: portal object
          content: { application/json: { schema: {type: object} } }
        '500':
          $ref: '#/components/responses/ServerError'
  /api/current-user/v1/token-login:
    post:
      summary: Token login
      tags: [ currentUser ]
      operationId: tokenLogin
      requestBody:
        required: true
        content: { application/json: { schema: {$ref: '#/components/schemas/TokenLoginInfo' } } }
      responses:
        '200':
          description: user object
          content: { application/json: { schema: {
            type: object
          } } }
        '500':
          $ref: '#/components/responses/ServerError'
  /api/adminUser/v1/{id}:
    get:
      summary: Gets an admin user
      tags: [ admin_user ]
      operationId: get
      parameters:
        - { name: id, in: path, required: true, schema: { type: string, format: uuid } }
      responses:
        '200':
          description: admin user object
          content: { application/json: { schema: {$ref: '#/components/schemas/AdminUserDto' }}}
        '404':
          description: admin user not found
        '500':
          $ref: '#/components/responses/ServerError'

  /api/adminUser/v1/{id}/roles:
    post:
      summary: Sets/updates the roles for an admin user
      tags: [ admin_user ]
      operationId: setRoles
      parameters:
        - { name: id, in: path, required: true, schema: { type: string, format: uuid } }
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RoleList'
      responses:
        '200':
          description: roles updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoleList'
        '500':
          $ref: '#/components/responses/ServerError'
  /api/portals/v1/{portalShortcode}/update/env/{targetEnv}/diff:
    get:
      summary: Gets the changes between one environment and another
      tags: [ portalEnvironment ]
      operationId: diff
      parameters:
        - { name: portalShortcode, in: path, required: true, schema: { type: string } }
        - { name: targetEnv, in: path, required: true, schema: { type: string } }
        - { name: sourceEnv, in: query, required: true, schema: { type: string } }
      responses:
        '200':
          description: PortalEnvironmentChangeRecord object
          content: { application/json: { schema: { type: object } } }
        '500':
          $ref: '#/components/responses/ServerError'
  /api/portals/v1/{portalShortcode}/update/env/{targetEnv}/update:
    post:
      summary: Updates a portal environment according to the update object
      tags: [ portalEnvironment ]
      operationId: update
      parameters:
        - { name: portalShortcode, in: path, required: true, schema: { type: string } }
        - { name: targetEnv, in: path, required: true, schema: { type: string } }
      requestBody:
        required: true
        content: { application/json: { schema: { type: object } } }
      responses:
        '200':
          description: PortalEnvironment object
          content: { application/json: { schema: { type: object } } }
        '500':
          $ref: '#/components/responses/ServerError'
  /api/internal/v1/populate/baseSeed:
    post:
      summary: Populates
      tags: [ populate ]
      operationId: populateBaseSeed
      responses:
        '201':
          description: stats object
          content:
            application/json:
              schema:
                type: object
        '500':
          $ref: '#/components/responses/ServerError'
  /api/internal/v1/populate/portal:
    post:
      summary: Populates
      tags: [ populate ]
      operationId: populatePortal
      parameters:
        - { name: filePathName, in: query, required: true, schema: { type: string } }
      responses:
        '201':
          description: portal object
          content:
            application/json:
              schema:
                type: object
        '500':
          $ref: '#/components/responses/ServerError'
  /api/internal/v1/populate/survey/{portalShortcode}:
    post:
      summary: Populates a survey to a given portal
      tags: [ populate ]
      operationId: populateSurvey
      parameters:
        - { name: portalShortcode, in: path, required: true, schema: { type: string } }
        - { name: filePathName, in: query, required: true, schema: { type: string } }
      responses:
        '201':
          description: survey object
          content:
            application/json:
              schema:
                type: object
        '500':
          $ref: '#/components/responses/ServerError'
  /api/internal/v1/populate/enrollee/{portalShortcode}/env/{envName}/study/{studyShortcode}:
    post:
      summary: Populates an Enrollee to a given portal/study/env.
      tags: [ populate ]
      operationId: populateEnrollee
      parameters:
        - { name: portalShortcode, in: path, required: true, schema: { type: string } }
        - { name: envName, in: path, required: true, schema: { type: string } }
        - { name: studyShortcode, in: path, required: true, schema: { type: string } }
        - { name: filePathName, in: query, required: true, schema: { type: string } }
      responses:
        '201':
          description: enrollee object
          content:
            application/json:
              schema:
                type: object
        '500':
          $ref: '#/components/responses/ServerError'
components:
  responses:
    SystemStatusResponse:
      description: A JSON description of the subsystems and their statuses.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SystemStatus'

    # Error Responses
    BadRequest:
      description: Bad request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorReport'
    PermissionDenied:
      description: Permission denied
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorReport'
    NotFound:
      description: Not found (or unauthorized)
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorReport'
    ServerError:
      description: Server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorReport'

  schemas:
    TokenLoginInfo:
      type: object
      properties:
        token: {type: string}
    VersionedFormDto:
      type: object
      properties:
        name: {type: string}
        version: {type: integer}
        content: {type: string}
        stableId: {type: string}
        id: {type: string, format: uuid}
    ConfiguredSurveyDto:
      type: object
      properties:
        id: {type: string, format: uuid }
        surveyId: { type: string, format: uuid }
        studyEnvironmentId: { type: string, format: uuid }
    ConfiguredConsentDto:
      type: object
      properties:
        id: { type: string, format: uuid }
        consentFormId: { type: string, format: uuid }
        studyEnvironmentId: { type: string, format: uuid }
    StudyEnvironmentDto:
      type: object
      properties:
        id: { type: string, format: uuid }
        preEnrollSurveyId: { type: string, format: uuid }
    AdminUserDto:
      type: object
      properties:
        id: { type: string, format: uuid }
        username: { type: string }
        lastLogin: { type: integer }
        superuser: { type: boolean }
    ErrorReport:
      type: object
      required: [ message, statusCode ]
      properties:
        message:
          type: string
        statusCode:
          type: integer
    PortalShallowDto:
      type: object
      properties:
        id: {type: string, format: uuid}
        shortcode: {type: string}
        name: {type: string}
        portalStudies: {type: array}
    RoleList:
      type: object
      properties:
        roles:
          type: array
          items: { type: string }
      required: [ roles ]
    PortalDto:
      type: object
    SystemStatus:
      required: [ ok, systems ]
      type: object
      properties:
        ok:
          type: boolean
          description: whether any system(s) need attention
        systems:
          type: object
          additionalProperties:
            type: object
            properties:
              ok:
                type: boolean
              messages:
                type: array
                items:
                  type: string

    VersionProperties:
      type: object
      properties:
        gitTag:
          type: string
        gitHash:
          type: string
        github:
          type: string
        build:
          type: string

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer

security:
  - bearerAuth: [ ]
