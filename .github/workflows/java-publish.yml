name: Publish and deploy
on: create

env:
  SERVICE_NAME: ${{ github.event.repository.name }}
  GOOGLE_PROJECT: dsp-artifact-registry
  GOOGLE_DOCKER_REPOSITORY: us-central1-docker.pkg.dev
  IMAGE_REPOSITORY_NAME: ddp

jobs:
  publish-job:
    permissions:
      contents: 'read'
      id-token:  'write'
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.tag.outputs.tag }}
    steps:
      - name: Checkout Current Code
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.BROADBOT_TOKEN }}
      - name: Set Up JDK
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'adopt'
          cache: 'gradle'
      
      - name: Parse tag
        id: tag
        run: echo "tag=$(git describe --tags)" >> $GITHUB_OUTPUT
      
      - name: Auth to Google
        uses: google-github-actions/auth@v1
        with:
          workload_identity_provider: projects/1038484894585/locations/global/workloadIdentityPools/github-wi-pool/providers/github-wi-provider
          service_account: 'dsp-artifact-registry-push@dsp-artifact-registry.iam.gserviceaccount.com'
      
      - name: Setup gcloud
        uses: google-github-actions/setup-gcloud@v1

      - name: Explicitly auth Docker for GCR
        run: gcloud auth configure-docker $GOOGLE_DOCKER_REPOSITORY --quiet

      - name: Construct docker image name and tag
        id: image-name
        run: echo "name=${GOOGLE_DOCKER_REPOSITORY}/${GOOGLE_PROJECT}/${IMAGE_REPOSITORY_NAME}/${SERVICE_NAME}:${{ steps.tag.outputs.tag }}" >> $GITHUB_OUTPUT
      
      - name: Build image locally with jib
        run: |
          ./gradlew --build-cache :api-admin:jibDockerBuild \
          --image=${{ steps.image-name.outputs.name }} \
          -Djib.console=plain
      
      - name: Run Trivy Vulnerability Scan
        uses: broadinstitute/dsp-appsec-trivy-action@v1
        with:
          image: ${{ steps.image-name.outputs.name }}

      - name: Push GCR image
        run: docker push ${{ steps.image-name.outputs.name }}
      
      - name: Notify slack on failure
        uses: broadinstitute/action-slack@v3.8.0
        if: failure()
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        with:
          channel: '#pearl-dev-notifications'
          status: failure
          author_name: Publish docker Image
          fields: job
          text: "Publish failed :sadpanda:, image ${{ steps.image-name.outputs.name }} failed to publish"
          username: 'Pearl Build Notifications'
  
  report-to-sherlock:
    # Report new version of application to DSP DevOps Tooling
    uses: broadinstitute/sherlock/.github/workflows/client-report-app-version.yaml@main
    needs: publish-job
    with:
      new-version: ${{ needs.publish-job.outputs.tag }}
      chart-name: 'd2p'
    permissions:
      contents: 'read'
      id-token: 'write'

  set-version-in-dev:
    # Put new version in ddp-azure-dev environment
    uses: broadinstitute/sherlock/.github/workflows/client-set-environment-app-version.yaml@main
    needs: [publish-job, report-to-sherlock]
    with:
      new-version: ${{ needs.publish-job.outputs.tag }}
      chart-name: 'd2p'
      environment-name: 'ddp-azure-dev'
    secrets:
      sync-git-token: ${{ secrets.BROADBOT_TOKEN }}
    permissions:
      id-token: 'write'
  
  notify-upon-completion:
    runs-on: ubuntu-latest
    needs: [set-version-in-dev, publish-job]
    steps:
      - uses: broadinstitute/action-slack@v3.8.0
        env: 
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        with:
          channel: '#pearl-dev-notifications'
          # Result status on the set version in dev job which actually performs the deploy
          status: ${{ needs.*.result }}
          author_name: Auto Deploy to Dev
          fields: job
          text: Deploy to dev of ${{ needs.publish-job.outputs.tag }} resulted in ${{ needs.set-version-in-dev.result }}
          username: 'Pearl Build Notifications'


