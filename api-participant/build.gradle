plugins {
    id 'bio.terra.java-spring-conventions'
    id 'de.undercouch.download'
    id 'com.google.cloud.tools.jib'
    id 'com.srcclr.gradle'
    id "io.freefair.lombok" version "6.5.1"
    id 'com.gorylenko.gradle-git-properties' version '2.3.1'
}

apply from: 'generators.gradle'
apply from: 'publishing.gradle'

dependencies {
    implementation 'bio.terra:terra-common-lib'
    implementation project(':core')
    implementation 'org.apache.commons:commons-dbcp2'
    implementation 'org.apache.commons:commons-text:1.10.0'
    implementation 'commons-beanutils:commons-beanutils:1.9.4'
    implementation 'org.springframework.boot:spring-boot-starter:2.7.10'
    implementation 'org.springframework.boot:spring-boot-starter-data-jdbc:2.7.10'
    implementation 'org.springframework.boot:spring-boot-starter-web:2.7.10'
    implementation 'org.yaml:snakeyaml:2.0'
    implementation 'org.springframework.retry:spring-retry'
    implementation 'javax.ws.rs:javax.ws.rs-api:2.1.1'
    implementation 'org.postgresql:postgresql'
    implementation 'org.yaml:snakeyaml:2.0'
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
    implementation 'com.sendgrid:sendgrid-java:4.0.1'
    implementation 'org.liquibase:liquibase-core:4.21.1'

    implementation 'com.auth0:java-jwt:4.2.2'

    implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5',
            // Uncomment the next line if you want to use RSASSA-PSS (PS256, PS384, PS512) algorithms:
            //'org.bouncycastle:bcprov-jdk15on:1.70',
            'io.jsonwebtoken:jjwt-jackson:0.11.5' // or 'io.jsonwebtoken:jjwt-gson:0.11.5' for gson

    testImplementation 'org.junit.jupiter:junit-jupiter-api'
    testImplementation('org.springframework.boot:spring-boot-starter-test:2.7.10') {
        // Fixes warning about multiple occurrences of JSONObject on the classpath
        exclude group: 'com.vaadin.external.google', module: 'android-json'
    }
    testImplementation 'org.mockito:mockito-inline'
    testImplementation 'commons-io:commons-io:2.13.0'
    // See https://stackoverflow.com/questions/5644011/multi-project-test-dependencies-with-gradle/60138176#60138176
    testImplementation(testFixtures(project(":core")))
}

task copyWebApp(type: Copy) {
    dependsOn(rootProject.bundleParticipantUI)
    from "$rootDir/ui-participant/build"
    into "$rootDir/api-participant/build/resources/main/static"
}

// creates copies of the fingerprinted js files without the asset fingerprint.
task createUnfingerprintedJs(type: Copy) {
    dependsOn('copyWebApp')
    dependsOn('processResources')
    from "$rootDir/api-participant/build/resources/main/static/static/js"
    into "$rootDir/api-participant/build/resources/main/static/static/js"
    rename("main.([0-9a-f]{8}).js", "main.js")
    rename('(.*).([0-9a-f]{8}).chunk.js', '$1.chunk.js')
}

// creates copies of the fingerprinted CSS files without the asset fingerprint
task createUnfingerprintedCss(type: Copy) {
    dependsOn('copyWebApp')
    dependsOn('processResources')
    from "$rootDir/api-participant/build/resources/main/static/static/css"
    into "$rootDir/api-participant/build/resources/main/static/static/css"
    rename("main.*.css", "main.css")
}

// See comment in PublicApiController.java for why we want unfingerprinted versions of assets.  We still keep the fingerprinted
// versions for reference to help in determining which version of a file the server *actually* has
task createUnfingerprintedAssets() {
    dependsOn('createUnfingerprintedJs')
    dependsOn('createUnfingerprintedCss')
}

// for now, only jib depends on copyWebApp (via createUnfingerprintedAssets),
// so that a npm rebuild/install will not be triggered for development redeploys.
// this means to deploy locally with the static assets in place you'll
// need to run the copyWebApp task yourself from the repo root with ./gradlew api-participant:copyWebApp
jibDockerBuild.dependsOn('createUnfingerprintedAssets')

test {
    useJUnitPlatform ()
}
