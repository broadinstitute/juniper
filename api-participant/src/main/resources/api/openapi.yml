openapi: 3.0.3
info:
  title: Juniper Participant API
  description: API for participant UI
  version: 0.0.1
paths:
  /status:
    get:
      summary: Check status of the service
      tags: [ public ]
      operationId: getStatus
      security: [ ]
      responses:
        '200':
          $ref: '#/components/responses/SystemStatusResponse'
        '500':
          $ref: '#/components/responses/ServerError'
        '503':
          $ref: '#/components/responses/SystemStatusResponse'

  /version:
    get:
      summary: Get version info of the deployed service
      tags: [ public ]
      operationId: getVersion
      security: [ ]
      responses:
        '200':
          description: Version information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VersionProperties'
        '404':
          description: "Version not configured"
        '500':
          $ref: '#/components/responses/ServerError'

  /config:
    get:
      summary: Get configuration info for authenticating with and using the API
      tags: [ public ]
      operationId: getConfig
      security: [ ]
      responses:
        '200':
          description: Configuration information
          content: { application/json: { schema: { type: object } } }
  /api/public/log/v1/log:
    post:
      summary: Logs an event
      tags: [ logging ]
      operationId: log
      requestBody:
        content: { application/json: { schema: { type: object }}}
      responses:
        '200':
          description: the id of the generated event
          content: { application/json: { schema: { type: string }}}
        '500':
          $ref: '#/components/responses/ServerError'
  /api/public/portals/v1/{portalShortcode}/env/{envName}:
    get:
      summary: Gets the portal object
      tags: [ portal ]
      operationId: get
      parameters:
        - { name: portalShortcode, in: path, required: true, schema: {type: string} }
        - { name: envName, in: path, required: true, schema: {type: string} }
        - { name: language, in: query, required: false, schema: { type: string } }
      responses:
        '200':
          description: portal object
          content: { application/json: { schema: { type: object }}}
        '500':
          $ref: '#/components/responses/ServerError'
  /api/public/i18n/v1:
    get:
      summary: Lists the core application texts for a given language
      tags: [ i18n ]
      operationId: listCoreLanguageTexts
      parameters:
        - { name: language, in: query, required: false, schema: { type: string } }
      responses:
        '200':
          description: OK
          content: { application/json: { schema: { type: object } } }
        '500':
          $ref: '#/components/responses/ServerError'
  /api/public/portals/v1/{portalShortcode}/env/{envName}/dashboard/config/alerts:
    get:
      summary: Lists all participant dashboard alert configs for a portal environment
      tags: [ portal ]
      operationId: listPortalEnvAlerts
      parameters:
        - { name: portalShortcode, in: path, required: true, schema: { type: string } }
        - { name: envName, in: path, required: true, schema: { type: string } }
      responses:
        '200':
          description: OK
          content: { application/json: { schema: { type: object } } }
        '500':
          $ref: '#/components/responses/ServerError'
  /api/public/portals/v1/{portalShortcode}/env/{envName}/mailingListContact:
    post:
      summary: submits a request to be added to a study or portal mailing list
      tags: [ mailingListContact ]
      operationId: create
      parameters:
        - { name: portalShortcode, in: path, required: true, schema: { type: string } }
        - { name: envName, in: path, required: true, schema: { type: string } }
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MailingListContactDto'
      responses:
        '200':
          description: mailing list contact
          content: { application/json: { schema: { type: object } } }
        '500':
          $ref: '#/components/responses/ServerError'
  /api/public/portals/v1/{portalShortcode}/env/{envName}/preReg/{surveyStableId}/{surveyVersion}:
    post:
      summary: Submits a preregistration survey
      tags: [ preregistration ]
      operationId: createAnonymous
      parameters:
        - { name: portalShortcode, in: path, required: true, schema: { type: string } }
        - { name: envName, in: path, required: true, schema: { type: string } }
        - { name: surveyStableId, in: path, required: true, schema: { type: string } }
        - { name: surveyVersion, in: path, required: true, schema: { type: integer } }
      requestBody:
        content:
          application/json:
            schema: {type: object}
      responses:
        '200':
          description: preregistration response
          content: { application/json: { schema: { type: object } } }
        '500':
          $ref: '#/components/responses/ServerError'
  /api/public/portals/v1/{portalShortcode}/env/{envName}/preReg/{preRegResponseId}/confirm:
    get:
      summary: Confirms a preregistration id
      tags: [ preregistration ]
      operationId: confirm
      parameters:
        - { name: portalShortcode, in: path, required: true, schema: { type: string } }
        - { name: envName, in: path, required: true, schema: { type: string } }
        - { name: preRegResponseId, in: path, required: true, schema: { type: string, format: uuid} }
      responses:
        '200':
          description: preregistration response
          content: { application/json: { schema: { type: object } } }
        '500':
          $ref: '#/components/responses/ServerError'
  /api/public/portals/v1/{portalShortcode}/env/{envName}/preEnroll/{surveyStableId}/{surveyVersion}:
    post:
      summary: Submits a pre-enrollment survey
      tags: [ preEnrollment ]
      operationId: createAnonymous
      parameters:
        - { name: portalShortcode, in: path, required: true, schema: { type: string } }
        - { name: envName, in: path, required: true, schema: { type: string } }
        - { name: surveyStableId, in: path, required: true, schema: { type: string } }
        - { name: surveyVersion, in: path, required: true, schema: { type: integer } }
      requestBody:
        content:
          application/json:
            schema: { type: object }
      responses:
        '200':
          description: preenrollment response
          content: { application/json: { schema: { type: object } } }
        '500':
          $ref: '#/components/responses/ServerError'
  /api/public/portals/v1/{portalShortcode}/env/{envName}/preEnroll/{preEnrollResponseId}/confirm:
    get:
      summary: Confirms a preEnrollment id
      tags: [ preEnrollment ]
      operationId: confirm
      parameters:
        - { name: portalShortcode, in: path, required: true, schema: { type: string } }
        - { name: envName, in: path, required: true, schema: { type: string } }
        - { name: preEnrollResponseId, in: path, required: true, schema: { type: string, format: uuid } }
      responses:
        '200':
          description: preenrollment response
          content: { application/json: { schema: { type: object } } }
        '500':
          $ref: '#/components/responses/ServerError'
  /api/portals/v1/{portalShortcode}/env/{envName}/studies/{studyShortcode}/enrollee:
    post:
      summary: Creates an enrollee object for the signed-in user and indicated study
      tags: [ enrollment ]
      operationId: createEnrollee
      parameters:
        - { name: portalShortcode, in: path, required: true, schema: { type: string } }
        - { name: envName, in: path, required: true, schema: { type: string } }
        - { name: studyShortcode, in: path, required: true, schema: { type: string } }
        - { name: preEnrollResponseId, in: query, required: false, schema: { type: string, format: uuid } }
        - { name: isProxy, in: query, required: false, schema: { type: boolean } }
      responses:
        '200':
          description: preenrollment response
          content: { application/json: { schema: { type: object } } }
        '500':
          $ref: '#/components/responses/ServerError'
  /api/portals/v1/{portalShortcode}/env/{envName}/studies/{studyShortcode}/enrollee/{enrolleeShortcode}/consents/{stableId}/{version}:
    get:
      summary: Gets a consent form and any existing responses for the signed-in user
      tags: [ consentResponse ]
      operationId: formAndResponses
      parameters:
        - { name: portalShortcode, in: path, required: true, schema: { type: string } }
        - { name: envName, in: path, required: true, schema: { type: string } }
        - { name: studyShortcode, in: path, required: true, schema: { type: string } }
        - { name: enrolleeShortcode, in: path, required: true, schema: { type: string } }
        - { name: stableId, in: path, required: false, schema: { type: string } }
        - { name: version, in: path, required: true, schema: { type: integer } }
      responses:
        '200':
          description: consent form and past responses
          content: { application/json: { schema: { type: object } } }
        '500':
          $ref: '#/components/responses/ServerError'
    post:
      summary: Posts a consent form response
      tags: [ consentResponse ]
      operationId: response
      parameters:
        - { name: portalShortcode, in: path, required: true, schema: { type: string } }
        - { name: envName, in: path, required: true, schema: { type: string } }
        - { name: studyShortcode, in: path, required: true, schema: { type: string } }
        - { name: enrolleeShortcode, in: path, required: true, schema: { type: string } }
        - { name: stableId, in: path, required: false, schema: { type: string } }
        - { name: version, in: path, required: true, schema: { type: integer } }
      requestBody:
        content:
          application/json:
            schema: { type: object }
      responses:
        '200':
          description: consent form and past responses
          content: { application/json: { schema: { type: object } } }
        '500':
          $ref: '#/components/responses/ServerError'
  /api/portals/v1/{portalShortcode}/env/{envName}/tasks:
    get:
      summary: List the tasks available to the signed-in user of the given type, includes the survey for each task
      tags: [ participantTask ]
      operationId: listTasksWithSurveys
      parameters:
        - { name: portalShortcode, in: path, required: true, schema: { type: string } }
        - { name: envName, in: path, required: true, schema: { type: string } }
        - { name: taskType, in: query, required: false, schema: { type: string } }
      responses:
        '200':
          description: list of outreach activities
          content: { application/json: { schema: { type: object } } }
        '500':
          $ref: '#/components/responses/ServerError'
  /api/portals/v1/{portalShortcode}/env/{envName}/studies/{studyShortcode}/enrollee/{enrolleeShortcode}/surveys/{stableId}/{version}:
    get:
      summary: Gets a survey and an active response if it exists for the signed-in user
      tags: [ surveyResponse ]
      operationId: formAndResponse
      parameters:
        - { name: portalShortcode, in: path, required: true, schema: { type: string } }
        - { name: envName, in: path, required: true, schema: { type: string } }
        - { name: studyShortcode, in: path, required: true, schema: { type: string } }
        - { name: enrolleeShortcode, in: path, required: true, schema: { type: string } }
        - { name: stableId, in: path, required: false, schema: { type: string } }
        - { name: version, in: path, required: true, schema: { type: integer } }
        - { name: taskId, in: query, required: false, schema: { type: string, format: uuid } }
      responses:
        '200':
          description: hub response object
          content: { application/json: { schema: { type: object } } }
        '500':
          $ref: '#/components/responses/ServerError'
    patch:
      summary: updates a snapshot with in-progress save data
      tags: [ surveyResponse ]
      operationId: update
      parameters:
        - { name: portalShortcode, in: path, required: true, schema: { type: string } }
        - { name: envName, in: path, required: true, schema: { type: string } }
        - { name: studyShortcode, in: path, required: true, schema: { type: string } }
        - { name: enrolleeShortcode, in: path, required: true, schema: { type: string } }
        - { name: stableId, in: path, required: false, schema: { type: string } }
        - { name: version, in: path, required: true, schema: { type: integer } }
        - { name: taskId, in: query, required: false, schema: { type: string, format: uuid } }
      requestBody:
        content:
          application/json:
            schema: { type: object }
      responses:
        '200':
          description: hub response object
          content: { application/json: { schema: { type: object } } }
        '500':
          $ref: '#/components/responses/ServerError'
  /api/public/portals/v1/{portalShortcode}/env/{envName}/internalRegister:
    post:
      summary: Submits a registration survey
      tags: [ registration ]
      operationId: internalRegister
      parameters:
        - { name: portalShortcode, in: path, required: true, schema: { type: string } }
        - { name: envName, in: path, required: true, schema: { type: string } }
        - { name: preRegResponseId, in: query, required: false, schema: { type: string, format: uuid } }
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegistrationInfo'
      responses:
        '200':
          description: preregistration response
          content: { application/json: { schema: { type: object } } }
        '500':
          $ref: '#/components/responses/ServerError'
  /api/portals/v1/{portalShortcode}/env/{envName}/register:
    post:
      summary: Submits a registration survey
      tags: [ registration ]
      operationId: register
      parameters:
        - { name: portalShortcode, in: path, required: true, schema: { type: string } }
        - { name: envName, in: path, required: true, schema: { type: string } }
        - { name: preRegResponseId, in: query, required: false, schema: { type: string, format: uuid } }
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegistrationInfo'
      responses:
        '200':
          description: preregistration response
          content: { application/json: { schema: { type: object } } }
        '500':
          $ref: '#/components/responses/ServerError'
  /api/public/portals/v1/{portalShortcode}/env/{envName}/siteImages/{version}/{cleanFileName}:
    get:
      summary: Returns the binary image data for the image of the given shortcode
      tags: [ siteImage ]
      operationId: get
      parameters:
        - { name: portalShortcode, in: path, required: true, schema: { type: string } }
        - { name: envName, in: path, required: true, schema: { type: string } }
        - { name: cleanFileName, in: path, required: true, schema: { type: string } }
        - { name: version, in: path, required: true, schema: { type: integer } }
      responses:
        '200':
          description: image data
          content:
            image/*: # see https://superuser.com/questions/979135/is-there-a-generic-mime-type-for-all-image-files
              schema:
                type: string
                format: binary
        '500':
          $ref: '#/components/responses/ServerError'
  /api/public/portals/v1/{portalShortcode}/env/{envName}/current-user/unauthed/login:
    post:
      summary: Development endpoint for logging in a user just on email address
      tags: [ currentUnauthedUser ]
      operationId: unauthedLogin
      parameters:
        - { name: portalShortcode, in: path, required: true, schema: { type: string } }
        - { name: envName, in: path, required: true, schema: { type: string } }
        - { name: username, in: query, required: true, schema: { type: string } }
      responses:
        '200':
          description: current user object with token
          content:
            application/json:
              schema: {type: object}
        '500':
          $ref: '#/components/responses/ServerError'
  /api/public/portals/v1/{portalShortcode}/env/{envName}/current-user/unauthed/refresh:
    post:
      summary: Development endpoint for logging in a user just on email address
      tags: [ currentUnauthedUser ]
      operationId: unauthedRefresh
      parameters:
        - { name: portalShortcode, in: path, required: true, schema: { type: string } }
        - { name: envName, in: path, required: true, schema: { type: string } }
      responses:
        '200':
          description: current user object with token
          content:
            application/json:
              schema: { type: object }
        '500':
          $ref: '#/components/responses/ServerError'
  /api/portals/v1/{portalShortcode}/env/{envName}/current-user/login:
    post:
      summary: logs in a user from a token
      tags: [ currentUser ]
      operationId: tokenLogin
      parameters:
        - { name: portalShortcode, in: path, required: true, schema: { type: string } }
        - { name: envName, in: path, required: true, schema: { type: string } }
      responses:
        '200':
          description: current user object with token
          content:
            application/json:
              schema: { type: object }
        '500':
          $ref: '#/components/responses/ServerError'
  /api/portals/v1/{portalShortcode}/env/{envName}/current-user/refresh:
    post:
      summary: fetches user state from a saved token to recover from a full page reload
      tags: [ currentUser ]
      operationId: refresh
      parameters:
        - { name: portalShortcode, in: path, required: true, schema: { type: string } }
        - { name: envName, in: path, required: true, schema: { type: string } }
      responses:
        '200':
          description: current user object with token
          content:
            application/json:
              schema: { type: object }
        '500':
          $ref: '#/components/responses/ServerError'
  /api/portals/v1/{portalShortcode}/env/{envName}/current-user/logout:
    post:
      summary: logs out the current user (baased on their bearer token)
      tags: [ currentUser ]
      operationId: logout
      parameters:
        - { name: portalShortcode, in: path, required: true, schema: { type: string } }
        - { name: envName, in: path, required: true, schema: { type: string } }
      responses:
        '200':
          description: logout successful
        '500':
          $ref: '#/components/responses/ServerError'

components:
  responses:
    SystemStatusResponse:
      description: A JSON description of the subsystems and their statuses.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SystemStatus'

    # Error Responses
    BadRequest:
      description: Bad request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorReport'
    PermissionDenied:
      description: Permission denied
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorReport'
    NotFound:
      description: Not found (or unauthorized)
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorReport'
    ServerError:
      description: Server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorReport'

  schemas:
    ErrorReport:
      type: object
      required: [ message, statusCode ]
      properties:
        message:
          type: string
        statusCode:
          type: integer

    SystemStatus:
      required: [ ok, systems ]
      type: object
      properties:
        ok:
          type: boolean
          description: whether any system(s) need attention
        systems:
          type: object
          additionalProperties:
            type: object
            properties:
              ok:
                type: boolean
              messages:
                type: array
                items:
                  type: string

    VersionProperties:
      type: object
      properties:
        gitTag:
          type: string
        gitHash:
          type: string
        github:
          type: string
        build:
          type: string

    RegistrationInfo:
      type: object
      properties:
        email:
          type: string
        isProxy:
          type: boolean

    MailingListContactDto:
      type: object
      required: [ email ]
      properties:
        email:
          type: string
        name:
          type: string

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer

security:
  - bearerAuth: [ ]
